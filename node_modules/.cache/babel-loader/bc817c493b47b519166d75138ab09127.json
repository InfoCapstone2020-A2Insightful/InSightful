{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\insightful\\\\src\\\\Metrics.js\";\nimport React, { Component } from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport { Button, ButtonGroup, ButtonToolbar } from 'reactstrap';\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\nimport './css/Metrics.css';\nimport './index.js';\nimport firebase from 'firebase/app';\nimport { DashBoard } from './DashBoard';\nexport class Metrics extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renderMetricCalculations = routerProps => {\n      // Retrieve all relevant information for a metric area \n      let rootPath = firebase.database().ref('metricCalculations');\n      rootPath.once('value', snapshot => {\n        let metricCalcInfo = snapshot.val();\n        let databaseKeys = Object.keys(metricCalcInfo);\n        let owner = null;\n        let mapCalculations = new Map();\n        let metricAreaCalculationIDs = databaseKeys.map(key => {\n          let id = metricCalcInfo[key].metricAreaID;\n\n          if (id == this.state.metricAreaID) {\n            owner = metricCalcInfo[key].owner;\n            mapCalculations.set(key, metricCalcInfo[key]);\n            return metricCalcInfo[key].metricCalculationID;\n          }\n        }); // Set the state to the new values that were obtained\n\n        this.setCalculations(owner, mapCalculations, metricAreaCalculationIDs);\n      });\n      return React.createElement(DashBoard, Object.assign({}, routerProps, {\n        metricAreaInfo: this.state.metricAreaInfo,\n        metricAreaID: this.state.metricAreaID,\n        metricAreaOwner: this.state.metricAreaOwner,\n        metricAreaCalculations: this.state.metricAreaCalculations,\n        metricAreaCalculationIDs: this.state.metricAreaCalculationIDs,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }));\n    };\n\n    this.setMetricName = this.setMetricName.bind(this);\n    this.state = {\n      // Data to be passed into metric calculations\n      // Represents metricAreaName\n      metricAreaInfo: null,\n      // Contains metric area name\n      metricAreaID: null,\n      // Contains metric area ID\n      metricAreaOwner: null,\n      // Contains metric area owner name\n      metricAreaCalculations: new Map(),\n      // Represents all calculations for a metric area\n      metricAreaCalculationIDs: []\n    };\n  } // Callback to render new information\n\n\n  setCalculations(owner, mapCalculations, metricAreaCalculationIDs) {\n    this.setState(state => {\n      state.metricAreaOwner = owner;\n      state.metricAreaCalculations = mapCalculations;\n      state.metricAreaCalculationIDs = metricAreaCalculationIDs;\n      return state;\n    });\n  } // Render dashboard page and send it the necessary props\n\n\n  setMetricName(name, id) {\n    this.setState({\n      metricAreaInfo: name,\n      metricAreaID: id\n    });\n  }\n\n  metricAreaElements() {\n    const metricAreaElements = Array.from(this.props.metrics.entries()).map(key => {\n      // Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\n      return React.createElement(MetricAreaCard, {\n        metricName: key[0],\n        metricID: key[1],\n        metricNameFunc: this.setMetricName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      });\n    });\n    return metricAreaElements;\n  }\n\n  render() {\n    const metricAreaElements = this.metricAreaElements();\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \" Metric Dashboard \"), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/Metrics/:metricID\",\n      render: this.renderMetricCalculations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(CardDeck, {\n      className: \"metricsDeck\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, metricAreaElements))));\n  }\n\n} // Represents a single metric button to render. A single metric card will contain the name of the metric\n// and acts as a link to the dashboard of the respective metric. \n\nclass MetricAreaCard extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (// When a link is clicked, retrieve the necessary information from firebase and then put it into metricAreaInfo\n      // <div>\n      //     <Link to={'/Metrics/' + this.props.metricName} onClick={()=>this.props.metricNameFunc(this.props.metricName, this.props.metricID)}>{this.props.metricName}</Link>\n      // </div>\n      React.createElement(Card, {\n        className: \"metrics\",\n        border: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        className: \"metricsBody\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: '/Metrics/' + this.props.metricName,\n        onClick: () => this.props.metricNameFunc(this.props.metricName, this.props.metricID),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, this.props.metricName)))\n    );\n  }\n\n}","map":{"version":3,"sources":["C:/Users/nathan/go/src/insightful/src/Metrics.js"],"names":["React","Component","Switch","Route","Link","Button","ButtonGroup","ButtonToolbar","Card","CardImg","CardText","CardBody","CardTitle","CardDeck","CardGroup","firebase","DashBoard","Metrics","constructor","props","renderMetricCalculations","routerProps","rootPath","database","ref","once","snapshot","metricCalcInfo","val","databaseKeys","Object","keys","owner","mapCalculations","Map","metricAreaCalculationIDs","map","key","id","metricAreaID","state","set","metricCalculationID","setCalculations","metricAreaInfo","metricAreaOwner","metricAreaCalculations","setMetricName","bind","setState","name","metricAreaElements","Array","from","metrics","entries","render","MetricAreaCard","metricName","metricNameFunc","metricID"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Switch, Route, Link } from 'react-router-dom';\r\nimport { Button, ButtonGroup, ButtonToolbar } from 'reactstrap';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\r\nimport './css/Metrics.css';\r\nimport './index.js';\r\nimport firebase from 'firebase/app';\r\nimport { DashBoard } from './DashBoard';\r\n\r\nexport class Metrics extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.setMetricName = this.setMetricName.bind(this)\r\n        this.state = {\r\n            // Data to be passed into metric calculations\r\n            // Represents metricAreaName\r\n            metricAreaInfo: null,   // Contains metric area name\r\n            metricAreaID: null,     // Contains metric area ID\r\n            metricAreaOwner: null,  // Contains metric area owner name\r\n            metricAreaCalculations: new Map(), // Represents all calculations for a metric area\r\n            metricAreaCalculationIDs: []\r\n        }\r\n    }\r\n\r\n    // Callback to render new information\r\n    setCalculations(owner, mapCalculations, metricAreaCalculationIDs) {\r\n        this.setState((state) => {\r\n            state.metricAreaOwner = owner\r\n            state.metricAreaCalculations = mapCalculations\r\n            state.metricAreaCalculationIDs = metricAreaCalculationIDs\r\n            return state\r\n        })\r\n    }\r\n\r\n    // Render dashboard page and send it the necessary props\r\n    renderMetricCalculations = (routerProps) => {\r\n\r\n        // Retrieve all relevant information for a metric area \r\n        let rootPath = firebase.database().ref('metricCalculations')\r\n\r\n        rootPath.once('value', (snapshot) => {\r\n            let metricCalcInfo = snapshot.val();\r\n            let databaseKeys = Object.keys(metricCalcInfo);\r\n            let owner = null\r\n            let mapCalculations = new Map()\r\n            \r\n            let metricAreaCalculationIDs = databaseKeys.map((key) => {\r\n                let id = metricCalcInfo[key].metricAreaID\r\n                if (id == this.state.metricAreaID) {\r\n                    owner = metricCalcInfo[key].owner\r\n                    mapCalculations.set(key, metricCalcInfo[key])\r\n                    return metricCalcInfo[key].metricCalculationID\r\n                }\r\n            })\r\n\r\n            // Set the state to the new values that were obtained\r\n            this.setCalculations(owner, mapCalculations, metricAreaCalculationIDs)\r\n        });\r\n\r\n        return <DashBoard\r\n                {...routerProps}\r\n                metricAreaInfo={this.state.metricAreaInfo}\r\n                metricAreaID={this.state.metricAreaID}\r\n                metricAreaOwner={this.state.metricAreaOwner}\r\n                metricAreaCalculations={this.state.metricAreaCalculations}\r\n                metricAreaCalculationIDs={this.state.metricAreaCalculationIDs}\r\n                />\r\n    }\r\n\r\n    setMetricName(name, id) {\r\n        this.setState({ \r\n            metricAreaInfo: name,\r\n            metricAreaID: id\r\n        })\r\n    }\r\n\r\n    metricAreaElements() {\r\n        const metricAreaElements = Array.from(this.props.metrics.entries()).map((key) => {\r\n            // Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\r\n            return <MetricAreaCard\r\n                metricName={key[0]}\r\n                metricID={key[1]}\r\n                metricNameFunc={this.setMetricName}\r\n            />\r\n        })\r\n        return metricAreaElements\r\n    }\r\n\r\n    render() {\r\n        const metricAreaElements = this.metricAreaElements()\r\n\r\n        return (\r\n            <div>\r\n                <h1> Metric Dashboard </h1>\r\n                <Switch>\r\n                    <Route path=\"/Metrics/:metricID\" render={this.renderMetricCalculations} />\r\n                    <div>\r\n                        <CardDeck className = 'metricsDeck'>\r\n                        { metricAreaElements}\r\n                        </CardDeck>\r\n                    </div>\r\n                </Switch> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// Represents a single metric button to render. A single metric card will contain the name of the metric\r\n// and acts as a link to the dashboard of the respective metric. \r\nclass MetricAreaCard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // When a link is clicked, retrieve the necessary information from firebase and then put it into metricAreaInfo\r\n            // <div>\r\n            //     <Link to={'/Metrics/' + this.props.metricName} onClick={()=>this.props.metricNameFunc(this.props.metricName, this.props.metricID)}>{this.props.metricName}</Link>\r\n            // </div>\r\n            <Card className = 'metrics' border=\"primary\">\r\n                <CardBody className='metricsBody'>\r\n                <Link to={'/Metrics/' + this.props.metricName} onClick={()=>this.props.metricNameFunc(this.props.metricName, this.props.metricID)}>{this.props.metricName}</Link>\r\n                </CardBody>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}