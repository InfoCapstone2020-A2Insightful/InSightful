{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\inSightful\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\inSightful\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\inSightful\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\inSightful\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\inSightful\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from'react';import{BrowserRouter as Router,Route,Link}from'react-router-dom';import{Table,Button}from'reactstrap';// import {MetricCalculationRow} from './test';\nimport'./index.js';import'./css/DashBoard.css';import firebase from'firebase/app';export var DashBoard=/*#__PURE__*/function(_Component){_inherits(DashBoard,_Component);function DashBoard(props){var _this;_classCallCheck(this,DashBoard);_this=_possibleConstructorReturn(this,_getPrototypeOf(DashBoard).call(this,props));_this.renderMetricMonthly=function(){var rootPath=firebase.database().ref('metricGoalsMonths');var monthMap=new Map();rootPath.once('value',function(snapshot){var info=snapshot.val();var keys=Object.keys(info);keys.map(function(key){var intKey=parseInt(key,10);// If the our prop of metric calculation IDs contains the ID, add it to the month map.\nif(_this.props.metricAreaCalculationIDs.includes(intKey)){monthMap.set(key,info[key]);}});_this.arrayMonthCalculations(monthMap);});};_this.renderMetricQuarterly=function(){var rootPath=firebase.database().ref('metricGoalsQuarters');var quarterMap=new Map();rootPath.once('value',function(snapshot){var info=snapshot.val();var keys=Object.keys(info);keys.map(function(key){var intKey=parseInt(key,10);if(_this.props.metricAreaCalculationIDs.includes(intKey)){quarterMap.set(key,info[key]);}});_this.arrayQuarterCalculations(quarterMap);});};_this.renderMetricAnnually=function(){var rootPath=firebase.database().ref('metricGoalsAnnuals');var annualMap=new Map();rootPath.once('value',function(snapshot){var info=snapshot.val();var keys=Object.keys(info);keys.map(function(key){var intKey=parseInt(key,10);if(_this.props.metricAreaCalculationIDs.includes(intKey)){annualMap.set(key,info[key]);}});_this.arrayAnnualCalculations(annualMap);});};_this.state={// Calculations should have the same array lengths...\n// Work on centralizing the data so we aren't hoping\n// everything is operating on the same index of the array\nmetricAreaCalculationsMonth:[],metricAreaCalculationsQuarter:[],metricAreaCalculationsAnnual:[],currentCalculation:0// Will always default to the first value in an array\n};return _this;}// Do any information retrieval here\n_createClass(DashBoard,[{key:\"componentDidMount\",value:function componentDidMount(){// Retrieve monthly information for a metric calculation\nthis.renderMetricMonthly();this.renderMetricQuarterly();this.renderMetricAnnually();}// Convert map to an array in the state\n},{key:\"arrayMonthCalculations\",value:function arrayMonthCalculations(map){this.setState(function(state){var monthArray=Array.from(map.entries()).map(function(key){return key;});state.metricAreaCalculationsMonth=monthArray;return state;});}// Convert a map to an array in the state\n},{key:\"arrayQuarterCalculations\",value:function arrayQuarterCalculations(map){this.setState(function(state){var quarterArray=Array.from(map.entries()).map(function(key){return key;});state.metricAreaCalculationsQuarter=quarterArray;return state;});}// Convert a map to an array in the state\n},{key:\"arrayAnnualCalculations\",value:function arrayAnnualCalculations(map){this.setState(function(state){var yearArray=Array.from(map.entries()).map(function(key){return key;});state.metricAreaCalculationsAnnual=yearArray;return state;});}// Retrieve data for monthly calculations\n},{key:\"leftButtonClick\",value:function leftButtonClick(){// let checkIfNullOrUnDef = this.state.metricAreaCalculationsQuarter.length\n// console.log(checkIfNullOrUnDef)\n// // if (checkIfNullOrUnDef) {\n// //     console.log(this.state.metricAreaCalculationsMonth.length)\n// // }\n}},{key:\"rightButtonClick\",value:function rightButtonClick(){// let checkIfNullOrUnDef = this.state.metricAreaCalculationsQuarter\n// if (checkIfNullOrUnDef) {\n//     console.log(this.state.metricAreaCalculationsMonth.length)\n// }\n}},{key:\"arrayElements\",value:function arrayElements(){var test=Array.from(this.props.metricAreaCalculations.entries()).map(function(key){//Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\nreturn React.createElement(MetricCalculationRow,{metrics:key[1].metric,metricCalc:key[1].metricCalculation});});return test;}},{key:\"monthArrayElements\",value:function monthArrayElements(numValue){// Metrics for monthly information\nvar currentMonthCalc=this.state.metricAreaCalculationsMonth;var calculationInfo=currentMonthCalc[numValue];var monthArrayInfo=[];// Render if not undefined/null for month information\nif(calculationInfo){var calculationKeys=calculationInfo[1];var keys=Object.keys(calculationKeys);monthArrayInfo=keys.map(function(key){var monthInfo=calculationKeys[key];return React.createElement(MetricMonthly,{actual:monthInfo.actual,target:monthInfo.target,month:monthInfo.month});});}return monthArrayInfo;}},{key:\"quarterArrayElements\",value:function quarterArrayElements(numValue){// Metrics for quarterly information\nvar currentQuarterCalc=this.state.metricAreaCalculationsQuarter;var calculationInfoQuarter=currentQuarterCalc[numValue];var quarterArrayInfo=[];if(calculationInfoQuarter){var calculationKeys=calculationInfoQuarter[1];var keys=Object.keys(calculationKeys);quarterArrayInfo=keys.map(function(key){var quarterInfo=calculationKeys[key];return React.createElement(MetricQuarterly,{actual:quarterInfo.actual,target:quarterInfo.target,quarter:quarterInfo.quarter});});}return quarterArrayInfo;}},{key:\"annualArrayElements\",value:function annualArrayElements(numValue){// Metrics for annual information\nvar currentAnnualCalc=this.state.metricAreaCalculationsAnnual;var calculationInfoAnnual=currentAnnualCalc[numValue];var annualArrayInfo=[];if(calculationInfoAnnual){var calculationKeys=calculationInfoAnnual[1];var keys=Object.keys(calculationKeys);annualArrayInfo=keys.map(function(key){var annualInfo=calculationKeys[key];return React.createElement(MetricAnnuals,{actual:annualInfo.actual,target:annualInfo.target,annual:annualInfo.quarter,highlight:annualInfo.highlights,lowlight:annualInfo.lowlights});});}return annualArrayInfo;}},{key:\"render\",value:function render(){var metricElements=this.arrayElements();var leftButtonString=\"<\";var rightButtonString=\">\";var currentNumCalc=this.state.currentCalculation;var monthElements=this.monthArrayElements(currentNumCalc);var quarterElements=this.quarterArrayElements(currentNumCalc);var annualElements=this.annualArrayElements(currentNumCalc);return React.createElement(\"div\",{className:\"body\"},React.createElement(\"h1\",null,\" \",this.props.metricAreaInfo,\" \"),React.createElement(\"h1\",null,\" \",this.props.metricAreaID,\" \"),React.createElement(\"h2\",null,\" Metric Area Summary \"),React.createElement(\"h3\",null,\" Owner: \",this.props.metricAreaOwner,\" \"),React.createElement(Table,{bordered:true,align:\"center\"},React.createElement(\"thead\",null,React.createElement(\"tr\",null,React.createElement(\"th\",null,\" Metric \"),React.createElement(\"th\",null,\" Metric Calculations \"))),React.createElement(\"tbody\",null,metricElements)),React.createElement(\"div\",null,monthElements,quarterElements,annualElements));}}]);return DashBoard;}(Component);// Represents a single row in the metric/metric calculations table\n// Contains all metric name and metric calculation names for a metric area\nvar MetricCalculationRow=/*#__PURE__*/function(_Component2){_inherits(MetricCalculationRow,_Component2);function MetricCalculationRow(props){_classCallCheck(this,MetricCalculationRow);return _possibleConstructorReturn(this,_getPrototypeOf(MetricCalculationRow).call(this,props));}_createClass(MetricCalculationRow,[{key:\"render\",value:function render(){return React.createElement(\"tr\",null,React.createElement(\"th\",null,this.props.metrics),React.createElement(\"th\",null,this.props.metricCalc));}}]);return MetricCalculationRow;}(Component);var MetricMonthly=/*#__PURE__*/function(_Component3){_inherits(MetricMonthly,_Component3);function MetricMonthly(props){_classCallCheck(this,MetricMonthly);return _possibleConstructorReturn(this,_getPrototypeOf(MetricMonthly).call(this,props));}_createClass(MetricMonthly,[{key:\"componentDidMount\",value:function componentDidMount(){}},{key:\"month\",value:function month(num){switch(num){case 1:return\"January\";case 2:return\"February\";case 3:return\"March\";case 4:return\"April\";case 5:return\"May\";case 6:return\"June\";case 7:return\"July\";case 8:return\"August\";case 9:return\"September\";case 10:return\"October\";case 11:return\"November\";case 12:return\"December\";}}},{key:\"render\",value:function render(){var actualValue=this.props.actual;var monthValue=this.month(this.props.month);// If there is no value existing for the actual yet\nif(!actualValue){actualValue=\"N/A\";}return React.createElement(\"div\",null,React.createElement(\"h2\",null,monthValue),React.createElement(Table,{responsive:true},React.createElement(\"tbody\",null,React.createElement(\"tr\",null,React.createElement(\"th\",null,\"Actual\"),React.createElement(\"th\",null,\"Target\")),React.createElement(\"tr\",null,React.createElement(\"th\",null,actualValue),React.createElement(\"th\",null,this.props.target)))));}}]);return MetricMonthly;}(Component);var MetricQuarterly=/*#__PURE__*/function(_Component4){_inherits(MetricQuarterly,_Component4);function MetricQuarterly(props){_classCallCheck(this,MetricQuarterly);return _possibleConstructorReturn(this,_getPrototypeOf(MetricQuarterly).call(this,props));}_createClass(MetricQuarterly,[{key:\"render\",value:function render(){var actualValue=this.props.actual;var quarterValue=\"Q\"+this.props.quarter;// If there is no value existing for the actual yet\nif(!actualValue){actualValue=\"N/A\";}return React.createElement(\"div\",null,React.createElement(\"h2\",null,quarterValue),React.createElement(Table,{responsive:true},React.createElement(\"tbody\",null,React.createElement(\"tr\",null,React.createElement(\"th\",null,\"Actual\"),React.createElement(\"th\",null,\"Target\")),React.createElement(\"tr\",null,React.createElement(\"th\",null,actualValue),React.createElement(\"th\",null,this.props.target)))));}}]);return MetricQuarterly;}(Component);var MetricAnnuals=/*#__PURE__*/function(_Component5){_inherits(MetricAnnuals,_Component5);function MetricAnnuals(props){_classCallCheck(this,MetricAnnuals);return _possibleConstructorReturn(this,_getPrototypeOf(MetricAnnuals).call(this,props));}_createClass(MetricAnnuals,[{key:\"render\",value:function render(){return React.createElement(\"div\",null,React.createElement(\"h2\",null,\"Annual\"),React.createElement(Table,null,React.createElement(\"tbody\",null,React.createElement(\"tr\",null,React.createElement(\"th\",null,\"Actual\"),React.createElement(\"th\",null,\"Target\"),React.createElement(\"th\",null,\"Highlights\"),React.createElement(\"th\",null,\"Lowlights\"),React.createElement(\"th\",null,\"Correction of Error\")),React.createElement(\"tr\",null,React.createElement(\"th\",null,this.props.actual),React.createElement(\"th\",null,this.props.target),React.createElement(\"th\",null,this.props.highlight),React.createElement(\"th\",null,this.props.lowlight),React.createElement(\"th\",null,this.props.correction)))));}}]);return MetricAnnuals;}(Component);","map":{"version":3,"sources":["C:/Users/nathan/go/src/inSightful/src/DashBoard.js"],"names":["React","Component","BrowserRouter","Router","Route","Link","Table","Button","firebase","DashBoard","props","renderMetricMonthly","rootPath","database","ref","monthMap","Map","once","snapshot","info","val","keys","Object","map","key","intKey","parseInt","metricAreaCalculationIDs","includes","set","arrayMonthCalculations","renderMetricQuarterly","quarterMap","arrayQuarterCalculations","renderMetricAnnually","annualMap","arrayAnnualCalculations","state","metricAreaCalculationsMonth","metricAreaCalculationsQuarter","metricAreaCalculationsAnnual","currentCalculation","setState","monthArray","Array","from","entries","quarterArray","yearArray","test","metricAreaCalculations","metric","metricCalculation","numValue","currentMonthCalc","calculationInfo","monthArrayInfo","calculationKeys","monthInfo","actual","target","month","currentQuarterCalc","calculationInfoQuarter","quarterArrayInfo","quarterInfo","quarter","currentAnnualCalc","calculationInfoAnnual","annualArrayInfo","annualInfo","highlights","lowlights","metricElements","arrayElements","leftButtonString","rightButtonString","currentNumCalc","monthElements","monthArrayElements","quarterElements","quarterArrayElements","annualElements","annualArrayElements","metricAreaInfo","metricAreaID","metricAreaOwner","MetricCalculationRow","metrics","metricCalc","MetricMonthly","num","actualValue","monthValue","MetricQuarterly","quarterValue","MetricAnnuals","highlight","lowlight","correction"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link} from 'react-router-dom';\r\nimport { Table, Button} from 'reactstrap';\r\n// import {MetricCalculationRow} from './test';\r\n\r\n\r\nimport './index.js';\r\nimport './css/DashBoard.css';\r\n\r\nimport firebase from 'firebase/app';\r\n\r\nexport class DashBoard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            // Calculations should have the same array lengths...\r\n            // Work on centralizing the data so we aren't hoping\r\n            // everything is operating on the same index of the array\r\n            metricAreaCalculationsMonth: [],\r\n            metricAreaCalculationsQuarter: [],\r\n            metricAreaCalculationsAnnual: [],\r\n            currentCalculation: 0 // Will always default to the first value in an array\r\n        }\r\n    }\r\n\r\n    // Do any information retrieval here\r\n    componentDidMount() {\r\n        // Retrieve monthly information for a metric calculation\r\n        this.renderMetricMonthly()\r\n        this.renderMetricQuarterly()  \r\n        this.renderMetricAnnually()  \r\n    }\r\n\r\n    // Convert map to an array in the state\r\n    arrayMonthCalculations(map) {\r\n        this.setState((state) => {\r\n            let monthArray = Array.from(map.entries()).map((key) => {\r\n                return key\r\n            })\r\n            state.metricAreaCalculationsMonth = monthArray\r\n            return state\r\n        })\r\n    }\r\n    \r\n    // Convert a map to an array in the state\r\n    arrayQuarterCalculations(map) {\r\n        this.setState((state) => {\r\n            let quarterArray = Array.from(map.entries()).map((key) => {\r\n                return key\r\n            })\r\n            state.metricAreaCalculationsQuarter = quarterArray\r\n            return state\r\n        })\r\n    }\r\n\r\n    // Convert a map to an array in the state\r\n    arrayAnnualCalculations(map) {\r\n        this.setState((state) => {\r\n            let yearArray = Array.from(map.entries()).map((key) => {\r\n                return key\r\n            })\r\n            state.metricAreaCalculationsAnnual = yearArray\r\n            return state\r\n        })\r\n    }\r\n\r\n    // Retrieve data for monthly calculations\r\n    renderMetricMonthly = () => {\r\n        let rootPath = firebase.database().ref('metricGoalsMonths')\r\n        let monthMap = new Map()\r\n\r\n        rootPath.once('value', (snapshot) => {\r\n            let info = snapshot.val();\r\n            let keys = Object.keys(info);\r\n            keys.map((key) => {\r\n                let intKey = parseInt(key, 10)\r\n                // If the our prop of metric calculation IDs contains the ID, add it to the month map.\r\n                if (this.props.metricAreaCalculationIDs.includes(intKey)) {\r\n                    monthMap.set(key, info[key])\r\n                }\r\n            })\r\n            this.arrayMonthCalculations(monthMap)\r\n        })\r\n    }\r\n\r\n    // Retrieve data for quarterly calculations\r\n    renderMetricQuarterly = () => {\r\n        let rootPath = firebase.database().ref('metricGoalsQuarters')\r\n        let quarterMap = new Map()\r\n\r\n        rootPath.once('value', (snapshot) => {\r\n            let info = snapshot.val();\r\n            let keys = Object.keys(info);\r\n            keys.map((key) => {\r\n                let intKey = parseInt(key, 10)\r\n                if (this.props.metricAreaCalculationIDs.includes(intKey)) {\r\n                    quarterMap.set(key, info[key])\r\n                }\r\n            })\r\n            this.arrayQuarterCalculations(quarterMap)\r\n        })\r\n    }\r\n\r\n    // Retrieve data for annually calculations\r\n    renderMetricAnnually = () => {\r\n        let rootPath = firebase.database().ref('metricGoalsAnnuals')\r\n        let annualMap = new Map()\r\n\r\n        rootPath.once('value', (snapshot) => {\r\n            let info = snapshot.val();\r\n            let keys = Object.keys(info);\r\n            keys.map((key) => {\r\n                let intKey = parseInt(key, 10)\r\n                if (this.props.metricAreaCalculationIDs.includes(intKey)) {\r\n                    annualMap.set(key, info[key])\r\n                }\r\n            })\r\n            this.arrayAnnualCalculations(annualMap)\r\n        })\r\n    }\r\n\r\n    leftButtonClick() {\r\n        // let checkIfNullOrUnDef = this.state.metricAreaCalculationsQuarter.length\r\n        // console.log(checkIfNullOrUnDef)\r\n        // // if (checkIfNullOrUnDef) {\r\n        // //     console.log(this.state.metricAreaCalculationsMonth.length)\r\n        // // }\r\n    }\r\n\r\n    rightButtonClick() {\r\n        // let checkIfNullOrUnDef = this.state.metricAreaCalculationsQuarter\r\n        // if (checkIfNullOrUnDef) {\r\n        //     console.log(this.state.metricAreaCalculationsMonth.length)\r\n        // }\r\n    }\r\n\r\n    arrayElements() {\r\n        const test = Array.from(this.props.metricAreaCalculations.entries()).map((key) => {\r\n            //Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\r\n            return <MetricCalculationRow\r\n                    metrics={key[1].metric}\r\n                    metricCalc={key[1].metricCalculation}\r\n                    />\r\n        })\r\n        return test\r\n    }\r\n\r\n    monthArrayElements(numValue) {\r\n        // Metrics for monthly information\r\n        let currentMonthCalc = this.state.metricAreaCalculationsMonth\r\n        let calculationInfo = currentMonthCalc[numValue]\r\n        let monthArrayInfo = []\r\n\r\n        // Render if not undefined/null for month information\r\n        if (calculationInfo) {\r\n            let calculationKeys = calculationInfo[1]\r\n            let keys = Object.keys(calculationKeys)\r\n            monthArrayInfo = keys.map((key) => {\r\n                let monthInfo = calculationKeys[key]\r\n                return <MetricMonthly\r\n                            actual={monthInfo.actual}\r\n                            target={monthInfo.target}\r\n                            month={monthInfo.month}\r\n                        />\r\n            })\r\n        }\r\n        return monthArrayInfo\r\n    }\r\n\r\n    quarterArrayElements(numValue) {\r\n        \r\n        // Metrics for quarterly information\r\n        let currentQuarterCalc = this.state.metricAreaCalculationsQuarter\r\n        let calculationInfoQuarter = currentQuarterCalc[numValue]\r\n        let quarterArrayInfo = []\r\n\r\n        if (calculationInfoQuarter) {\r\n            let calculationKeys = calculationInfoQuarter[1]\r\n            let keys = Object.keys(calculationKeys)\r\n            quarterArrayInfo = keys.map((key) => {\r\n                let quarterInfo = calculationKeys[key]\r\n                return <MetricQuarterly\r\n                            actual={quarterInfo.actual}\r\n                            target={quarterInfo.target}\r\n                            quarter={quarterInfo.quarter}\r\n                        />\r\n            })\r\n        }\r\n        return quarterArrayInfo\r\n    }\r\n\r\n    annualArrayElements(numValue) {\r\n        // Metrics for annual information\r\n        let currentAnnualCalc = this.state.metricAreaCalculationsAnnual\r\n        let calculationInfoAnnual = currentAnnualCalc[numValue]\r\n        let annualArrayInfo = []\r\n\r\n        if (calculationInfoAnnual) {\r\n            let calculationKeys = calculationInfoAnnual[1]\r\n            let keys = Object.keys(calculationKeys)\r\n            annualArrayInfo = keys.map((key) => {\r\n                let annualInfo = calculationKeys[key]\r\n                return <MetricAnnuals\r\n                            actual={annualInfo.actual}\r\n                            target={annualInfo.target}\r\n                            annual={annualInfo.quarter}\r\n                            highlight={annualInfo.highlights}\r\n                            lowlight={annualInfo.lowlights}\r\n                        />\r\n            })\r\n        }\r\n        return annualArrayInfo\r\n    }\r\n\r\n    render() {\r\n        const metricElements = this.arrayElements()\r\n\r\n        let leftButtonString = \"<\"\r\n        let rightButtonString = \">\"\r\n\r\n        let currentNumCalc = this.state.currentCalculation\r\n        let monthElements = this.monthArrayElements(currentNumCalc)\r\n        let quarterElements = this.quarterArrayElements(currentNumCalc)\r\n        let annualElements = this.annualArrayElements(currentNumCalc)\r\n\r\n        return(        \r\n            <div className = \"body\">\r\n            <h1> {this.props.metricAreaInfo} </h1>\r\n            <h1> {this.props.metricAreaID} </h1>\r\n            <h2> Metric Area Summary </h2>\r\n            <h3> Owner: {this.props.metricAreaOwner} </h3>\r\n\r\n            <Table bordered align=\"center\">\r\n                <thead>\r\n                    <tr>\r\n                    <th> Metric </th>\r\n                    <th> Metric Calculations </th>\r\n\r\n                    </tr>\r\n                </thead>\r\n\r\n\r\n                {/* Table representing metric and metric caluclation */}\r\n                <tbody>\r\n                    {metricElements}\r\n                </tbody>\r\n            </Table>\r\n\r\n            {/* Container for current  */}\r\n            <div>\r\n                {/* <div>\r\n                    <Button onClick={this.leftButtonClick}>   \r\n                        {leftButtonString}\r\n                    </Button>\r\n                    <Button onClick={this.rightButtonClick}>\r\n                        {rightButtonString}\r\n                    </Button>\r\n                </div> */}\r\n\r\n                {/* Monthly Information */}\r\n                {monthElements}\r\n            \r\n                {/* Quarterly Information */}\r\n                {quarterElements}\r\n\r\n                {/* Yearly Information */}\r\n                {annualElements}\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n// Represents a single row in the metric/metric calculations table\r\n// Contains all metric name and metric calculation names for a metric area\r\nclass MetricCalculationRow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <th>\r\n                    {this.props.metrics}\r\n                </th>\r\n                <th>\r\n                    {this.props.metricCalc}\r\n                </th>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nclass MetricMonthly extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    month(num) {\r\n        switch(num) {\r\n            case 1:\r\n                return \"January\"\r\n            case 2:\r\n                return \"February\"\r\n            case 3: \r\n                return \"March\"\r\n            case 4:\r\n                return \"April\"\r\n            case 5:\r\n                return \"May\"\r\n            case 6: \r\n                return \"June\"\r\n            case 7:\r\n                return \"July\"\r\n            case 8:\r\n                return \"August\"\r\n            case 9:\r\n                return \"September\"\r\n            case 10:\r\n                return \"October\"\r\n            case 11:\r\n                return \"November\"\r\n            case 12:\r\n                return \"December\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let actualValue = this.props.actual\r\n        let monthValue = this.month(this.props.month)\r\n\r\n        // If there is no value existing for the actual yet\r\n        if (!actualValue) {\r\n            actualValue = \"N/A\"\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h2>{monthValue}</h2>\r\n                <Table responsive>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Actual</th>\r\n                            <th>Target</th>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>{actualValue}</th>\r\n                            <th>{this.props.target}</th>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass MetricQuarterly extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n\r\n        let actualValue = this.props.actual\r\n        let quarterValue = \"Q\" + this.props.quarter\r\n\r\n        // If there is no value existing for the actual yet\r\n        if (!actualValue) {\r\n            actualValue = \"N/A\"\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h2>{quarterValue}</h2>\r\n                <Table responsive>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Actual</th>\r\n                            <th>Target</th>\r\n                        </tr>\r\n                        <tr>\r\n                            {/* This should be auto-calculated based upon month values */}\r\n                            <th>{actualValue}</th>\r\n                            <th>{this.props.target}</th>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass MetricAnnuals extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Annual</h2>\r\n                <Table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Actual</th>\r\n                            <th>Target</th>\r\n                            <th>Highlights</th>\r\n                            <th>Lowlights</th>\r\n                            <th>Correction of Error</th>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>{this.props.actual}</th>\r\n                            <th>{this.props.target}</th>\r\n                            <th>{this.props.highlight}</th>\r\n                            <th>{this.props.lowlight}</th>\r\n                            <th>{this.props.correction}</th>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}