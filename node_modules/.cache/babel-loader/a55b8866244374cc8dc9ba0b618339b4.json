{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\insightful\\\\insightful\\\\src\\\\Metrics.js\";\nimport React, { Component } from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport { Button, ButtonGroup, ButtonToolbar } from 'reactstrap';\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\nimport './css/Metrics.css';\nimport './index.js';\nimport firebase from 'firebase/app';\nimport { DashBoard } from './DashBoard';\nexport class Metrics extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renderMetricCalculations = routerProps => {\n      // Retrieve all relevant information for a metric area \n      let rootPath = firebase.database().ref('metricCalculations');\n      rootPath.once('value', snapshot => {\n        let metricCalcInfo = snapshot.val();\n        let databaseKeys = Object.keys(metricCalcInfo);\n        let owner = null;\n        let mapCalculations = new Map();\n        let metricAreaCalculationIDs = databaseKeys.map(key => {\n          let id = metricCalcInfo[key].metricAreaID;\n\n          if (id == this.state.metricAreaID) {\n            owner = metricCalcInfo[key].owner;\n            mapCalculations.set(key, metricCalcInfo[key]);\n            console.log(metricAreaInfo[key]);\n          }\n        }); // databa\n\n        this.setCalculations(owner, mapCalculations); // this.setMonthlyActualsAndTargets()\n      }); // Retrieve\n\n      let metricATMonthlyPath = firebase.database().ref('metricGoalsMonths');\n      metricATMonthlyPath.once('value', snapshot => {\n        let monthlyInfo = snapshot.val();\n        console.log(monthlyInfo);\n      });\n      return React.createElement(DashBoard, Object.assign({}, routerProps, {\n        metricAreaInfo: this.state.metricAreaInfo,\n        metricAreaID: this.state.metricAreaID,\n        metricAreaOwner: this.state.metricAreaOwner,\n        metricAreaCalculations: this.state.metricAreaCalculations,\n        metricAreaCalculationsMonth: this.state.metricAreaCalculationsMonth,\n        metricAreaCalculationsQuarters: this.state.metricAreaCalculationsQuarters,\n        metricAreaCalculationsYears: this.state.metricAreaCalculationsYears,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }));\n    };\n\n    this.setMetricName = this.setMetricName.bind(this); // let metricMonths = new Map()\n    // let metricQuarters =  new Map()\n    // let metricYears = new Map()\n\n    this.state = {\n      // metrics: this.props.metrics,\n      // Data to be passed into metric calculations\n      // Represents metricAreaName\n      metricAreaInfo: null,\n      // Contains metric area name\n      metricAreaID: null,\n      // Contains metric area ID\n      metricAreaOwner: null,\n      // Contains metric area owner name\n      metricAreaCalculations: new Map(),\n      // Represents all calculations for a metric area\n      metricAreaCalculationIDs: [],\n      metricAreaCalculationsMonth: null,\n      // Represents calculations for a month\n      metricAreaCalculationsQuarters: null,\n      // Represents calculations for quarters\n      metricAreaCalculationsYears: null // Represents calculations for a year\n\n    };\n  } // Callback to render new information\n\n\n  setCalculations(owner, mapCalculations) {\n    this.setState(state => {\n      state.metricAreaOwner = owner;\n      state.metricAreaCalculations = mapCalculations;\n      return state;\n    });\n  } // setMonthlyActualsAndTargets()\n  // Render dashboard page and send it the necessary props\n\n\n  setMetricName(name, id) {\n    this.setState({\n      metricAreaInfo: name,\n      metricAreaID: id\n    });\n  }\n\n  render() {\n    return React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/Metrics/:metricID\",\n      render: this.renderMetricCalculations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, Array.from(this.props.metrics.entries()).map(key => {\n      // Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\n      return React.createElement(MetricAreaCard, {\n        metricName: key[0],\n        metricID: key[1],\n        metricNameFunc: this.setMetricName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      });\n    })));\n  }\n\n} // Represents a single metric button to render. A single metric card will contain the name of the metric\n// and acts as a link to the dashboard of the respective metric. \n\nclass MetricAreaCard extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (// When a link is clicked, retrieve the necessary information from firebase and then put it into metricAreaInfo\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: '/Metrics/' + this.props.metricName,\n        onClick: () => this.props.metricNameFunc(this.props.metricName, this.props.metricID),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, this.props.metricName))\n    );\n  }\n\n}","map":{"version":3,"sources":["C:/Users/nathan/go/src/insightful/insightful/src/Metrics.js"],"names":["React","Component","Switch","Route","Link","Button","ButtonGroup","ButtonToolbar","Card","CardImg","CardText","CardBody","CardTitle","CardDeck","CardGroup","firebase","DashBoard","Metrics","constructor","props","renderMetricCalculations","routerProps","rootPath","database","ref","once","snapshot","metricCalcInfo","val","databaseKeys","Object","keys","owner","mapCalculations","Map","metricAreaCalculationIDs","map","key","id","metricAreaID","state","set","console","log","metricAreaInfo","setCalculations","metricATMonthlyPath","monthlyInfo","metricAreaOwner","metricAreaCalculations","metricAreaCalculationsMonth","metricAreaCalculationsQuarters","metricAreaCalculationsYears","setMetricName","bind","setState","name","render","Array","from","metrics","entries","MetricAreaCard","metricName","metricNameFunc","metricID"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Switch, Route, Link } from 'react-router-dom';\r\nimport { Button, ButtonGroup, ButtonToolbar } from 'reactstrap';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\r\nimport './css/Metrics.css';\r\nimport './index.js';\r\nimport firebase from 'firebase/app';\r\nimport { DashBoard } from './DashBoard';\r\n\r\nexport class Metrics extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.setMetricName = this.setMetricName.bind(this);\r\n        // let metricMonths = new Map()\r\n        // let metricQuarters =  new Map()\r\n        // let metricYears = new Map()\r\n\r\n        this.state = {\r\n            // metrics: this.props.metrics,\r\n\r\n            // Data to be passed into metric calculations\r\n            // Represents metricAreaName\r\n            metricAreaInfo: null,   // Contains metric area name\r\n            metricAreaID: null,     // Contains metric area ID\r\n            metricAreaOwner: null,  // Contains metric area owner name\r\n            metricAreaCalculations: new Map(), // Represents all calculations for a metric area\r\n            metricAreaCalculationIDs: [],\r\n            metricAreaCalculationsMonth: null, // Represents calculations for a month\r\n            metricAreaCalculationsQuarters: null, // Represents calculations for quarters\r\n            metricAreaCalculationsYears: null, // Represents calculations for a year\r\n        }\r\n    }\r\n\r\n    // Callback to render new information\r\n    setCalculations(owner, mapCalculations) {\r\n        this.setState((state) => {\r\n            state.metricAreaOwner = owner\r\n            state.metricAreaCalculations = mapCalculations\r\n            return state\r\n        })\r\n    }\r\n\r\n    // setMonthlyActualsAndTargets()\r\n\r\n    // Render dashboard page and send it the necessary props\r\n    renderMetricCalculations = (routerProps) => {\r\n\r\n        // Retrieve all relevant information for a metric area \r\n        let rootPath = firebase.database().ref('metricCalculations')\r\n\r\n        rootPath.once('value', (snapshot) => {\r\n            let metricCalcInfo = snapshot.val();\r\n            let databaseKeys = Object.keys(metricCalcInfo);\r\n            let owner = null\r\n            let mapCalculations = new Map()\r\n            \r\n            let metricAreaCalculationIDs = databaseKeys.map((key) => {\r\n                let id = metricCalcInfo[key].metricAreaID\r\n                if (id == this.state.metricAreaID) {\r\n                    owner = metricCalcInfo[key].owner\r\n                    mapCalculations.set(key, metricCalcInfo[key])\r\n                    console.log(metricAreaInfo[key])\r\n                }\r\n            })\r\n\r\n            // databa\r\n\r\n            this.setCalculations(owner, mapCalculations)\r\n            // this.setMonthlyActualsAndTargets()\r\n        });\r\n\r\n        // Retrieve\r\n        let metricATMonthlyPath = firebase.database().ref('metricGoalsMonths')\r\n\r\n        metricATMonthlyPath.once('value', (snapshot) => {\r\n            let monthlyInfo = snapshot.val();\r\n            console.log(monthlyInfo)\r\n        })\r\n\r\n\r\n\r\n\r\n        return <DashBoard\r\n                {...routerProps}\r\n                metricAreaInfo={this.state.metricAreaInfo}\r\n                metricAreaID={this.state.metricAreaID}\r\n                metricAreaOwner={this.state.metricAreaOwner}\r\n                metricAreaCalculations={this.state.metricAreaCalculations}\r\n                metricAreaCalculationsMonth={this.state.metricAreaCalculationsMonth}\r\n                metricAreaCalculationsQuarters={this.state.metricAreaCalculationsQuarters}\r\n                metricAreaCalculationsYears={this.state.metricAreaCalculationsYears}\r\n                />\r\n    }\r\n\r\n    setMetricName(name, id) {\r\n        this.setState({ \r\n            metricAreaInfo: name,\r\n            metricAreaID: id\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Switch>\r\n                <Route path=\"/Metrics/:metricID\" render={this.renderMetricCalculations} />\r\n                <div>\r\n                    {\r\n                        Array.from(this.props.metrics.entries()).map((key) => {\r\n                            // Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\r\n                            return <MetricAreaCard\r\n                                metricName={key[0]}\r\n                                metricID={key[1]}\r\n                                metricNameFunc={this.setMetricName}\r\n                            />\r\n                        })\r\n                    }\r\n                </div>\r\n             </Switch> \r\n        )\r\n    }\r\n}\r\n\r\n// Represents a single metric button to render. A single metric card will contain the name of the metric\r\n// and acts as a link to the dashboard of the respective metric. \r\nclass MetricAreaCard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // When a link is clicked, retrieve the necessary information from firebase and then put it into metricAreaInfo\r\n            <div>\r\n                <Link to={'/Metrics/' + this.props.metricName} onClick={()=>this.props.metricNameFunc(this.props.metricName, this.props.metricID)}>{this.props.metricName}</Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}