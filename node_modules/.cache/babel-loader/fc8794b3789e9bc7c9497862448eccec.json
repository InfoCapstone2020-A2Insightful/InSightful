{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\insightful\\\\insightful\\\\src\\\\Metrics.js\";\nimport React, { Component } from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport { Button, ButtonGroup, ButtonToolbar } from 'reactstrap';\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\nimport './css/Metrics.css';\nimport './index.js';\nimport firebase from 'firebase/app';\nimport { DashBoard } from './DashBoard';\nexport class Metrics extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renderMetricCalculations = routerProps => {\n      let rootPath = firebase.database().ref('metricCalculations');\n      rootPath.once('value', snapshot => {\n        let metricCalcInfo = snapshot.val();\n        let databaseKeys = Object.keys(metricCalcInfo);\n        console.log(databaseKeys);\n      });\n      return React.createElement(DashBoard, Object.assign({}, routerProps, {\n        metricAreaInfo: this.props.metricName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }));\n    };\n\n    this.state = {\n      metrics: this.props.metrics,\n      // Represents metricAreaName\n      metricAreaInfo: null\n    };\n  } // Render dashboard page and send it the necessary props\n\n\n  setMetricName() {}\n\n  render() {\n    return React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/Metrics/:metricID\",\n      render: this.renderMetricCalculations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, this.props.metrics.map(item => {\n      // Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\n      return React.createElement(MetricAreaCard, {\n        metricName: item,\n        metricNameFunc: this.setMetricName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      });\n    })));\n  }\n\n} // Represents a single metric button to render. A single metric card will contain the name of the metric\n// and acts as a link to the dashboard of the respective metric. \n\nclass MetricAreaCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      metricName: this.props.metricName\n    };\n  } // // Render dashboard page and send it the necessary props\n  // renderMetricCalculations = (routerProps) => {\n  //     let rootPath = firebase.database().ref('metricCalculations')\n  //     rootPath.once('value', (snapshot) => {\n  //         let metricCalcInfo = snapshot.val();\n  //         let databaseKeys = Object.keys(metricCalcInfo);\n  //         console.log(databaseKeys)\n  //     })\n  //     return <DashBoard {...routerProps}\n  //             metricAreaInfo={this.props.metricName}\n  //            />\n  // }\n\n\n  render() {\n    return (// When a link is clicked, retrieve the necessary information from firebase and then put it into metricAreaInfo\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: '/Metrics/' + this.props.metricName,\n        onClick: this.metricFunc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, this.props.metricName))\n    );\n  }\n\n}","map":{"version":3,"sources":["C:/Users/nathan/go/src/insightful/insightful/src/Metrics.js"],"names":["React","Component","Switch","Route","Link","Button","ButtonGroup","ButtonToolbar","Card","CardImg","CardText","CardBody","CardTitle","CardDeck","CardGroup","firebase","DashBoard","Metrics","constructor","props","renderMetricCalculations","routerProps","rootPath","database","ref","once","snapshot","metricCalcInfo","val","databaseKeys","Object","keys","console","log","metricName","state","metrics","metricAreaInfo","setMetricName","render","map","item","MetricAreaCard","metricFunc"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,QAAoC,kBAApC;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,aAA9B,QAAmD,YAAnD;AACA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,QAAxB,EAAkCC,QAAlC,EAA4CC,SAA5C,EAAuDC,QAAvD,EAAiEC,SAAjE,QAAkF,YAAlF;AACA,OAAO,mBAAP;AACA,OAAO,YAAP;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAO,MAAMC,OAAN,SAAsBhB,SAAtB,CAAgC;AAEnCiB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAUnBC,wBAVmB,GAUSC,WAAD,IAAiB;AACxC,UAAIC,QAAQ,GAAGP,QAAQ,CAACQ,QAAT,GAAoBC,GAApB,CAAwB,oBAAxB,CAAf;AAEAF,MAAAA,QAAQ,CAACG,IAAT,CAAc,OAAd,EAAwBC,QAAD,IAAc;AACjC,YAAIC,cAAc,GAAGD,QAAQ,CAACE,GAAT,EAArB;AACA,YAAIC,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYJ,cAAZ,CAAnB;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;AACH,OAJD;AAMA,aAAO,oBAAC,SAAD,oBAAeR,WAAf;AACC,QAAA,cAAc,EAAE,KAAKF,KAAL,CAAWe,UAD5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AAGH,KAtBkB;;AAEf,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,KAAKjB,KAAL,CAAWiB,OADX;AAET;AACAC,MAAAA,cAAc,EAAE;AAHP,KAAb;AAKH,GATkC,CAWnC;;;AAeAC,EAAAA,aAAa,GAAG,CAEf;;AAEDC,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,oBAAZ;AAAiC,MAAA,MAAM,EAAE,KAAKnB,wBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQ,KAAKD,KAAL,CAAWiB,OAAX,CAAmBI,GAAnB,CAAwBC,IAAD,IAAU;AAC7B;AACA,aAAO,oBAAC,cAAD;AACH,QAAA,UAAU,EAAEA,IADT;AAEH,QAAA,cAAc,EAAE,KAAKH,aAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAIH,KAND,CAFR,CAJJ,CADJ;AAkBH;;AAjDkC,C,CAoDvC;AACA;;AACA,MAAMI,cAAN,SAA6BzC,SAA7B,CAAuC;AACnCiB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKgB,KAAL,GAAa;AACTD,MAAAA,UAAU,EAAE,KAAKf,KAAL,CAAWe;AADd,KAAb;AAGH,GANkC,CAQnC;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEAK,EAAAA,MAAM,GAAG;AACL,WACI;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAE,cAAc,KAAKpB,KAAL,CAAWe,UAAnC;AAA+C,QAAA,OAAO,EAAE,KAAKS,UAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA0E,KAAKxB,KAAL,CAAWe,UAArF,CADJ;AAFJ;AAMH;;AA9BkC","sourcesContent":["import React, { Component } from 'react';\r\nimport { Switch, Route, Link } from 'react-router-dom';\r\nimport { Button, ButtonGroup, ButtonToolbar } from 'reactstrap';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\r\nimport './css/Metrics.css';\r\nimport './index.js';\r\nimport firebase from 'firebase/app';\r\nimport { DashBoard } from './DashBoard';\r\n\r\nexport class Metrics extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            metrics: this.props.metrics,\r\n            // Represents metricAreaName\r\n            metricAreaInfo: null\r\n        }\r\n    }\r\n\r\n    // Render dashboard page and send it the necessary props\r\n    renderMetricCalculations = (routerProps) => {\r\n        let rootPath = firebase.database().ref('metricCalculations')\r\n\r\n        rootPath.once('value', (snapshot) => {\r\n            let metricCalcInfo = snapshot.val();\r\n            let databaseKeys = Object.keys(metricCalcInfo);\r\n            console.log(databaseKeys)\r\n        })\r\n\r\n        return <DashBoard {...routerProps}\r\n                metricAreaInfo={this.props.metricName}\r\n                />\r\n    }\r\n\r\n    setMetricName() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Switch>\r\n               {/* <Route path=\"/Metrics/:metricID\" render={(props) => <DashBoard {...props}\r\n                 metricAreaInfo={this.state.metricAreaInfo} />} /> */}\r\n                <Route path=\"/Metrics/:metricID\" render={this.renderMetricCalculations} />\r\n                <div>\r\n                    {\r\n                        this.props.metrics.map((item) => {\r\n                            // Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\r\n                            return <MetricAreaCard\r\n                                metricName={item}\r\n                                metricNameFunc={this.setMetricName}\r\n                            />\r\n                        })\r\n                    }\r\n                </div>\r\n             </Switch> \r\n        )\r\n    }\r\n}\r\n\r\n// Represents a single metric button to render. A single metric card will contain the name of the metric\r\n// and acts as a link to the dashboard of the respective metric. \r\nclass MetricAreaCard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            metricName: this.props.metricName\r\n        }\r\n    }\r\n\r\n    // // Render dashboard page and send it the necessary props\r\n    // renderMetricCalculations = (routerProps) => {\r\n    //     let rootPath = firebase.database().ref('metricCalculations')\r\n\r\n    //     rootPath.once('value', (snapshot) => {\r\n    //         let metricCalcInfo = snapshot.val();\r\n    //         let databaseKeys = Object.keys(metricCalcInfo);\r\n    //         console.log(databaseKeys)\r\n    //     })\r\n\r\n    //     return <DashBoard {...routerProps}\r\n    //             metricAreaInfo={this.props.metricName}\r\n    //            />\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            // When a link is clicked, retrieve the necessary information from firebase and then put it into metricAreaInfo\r\n            <div>\r\n                <Link to={'/Metrics/' + this.props.metricName} onClick={this.metricFunc}>{this.props.metricName}</Link>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}