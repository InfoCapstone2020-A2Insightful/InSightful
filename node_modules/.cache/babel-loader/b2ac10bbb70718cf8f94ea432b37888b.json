{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\insightful\\\\insightful\\\\src\\\\Metrics.js\";\nimport React, { Component } from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport { Button, ButtonGroup, ButtonToolbar } from 'reactstrap';\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\nimport './css/Metrics.css';\nimport './index.js';\nimport firebase from 'firebase/app';\nimport { DashBoard } from './DashBoard';\nexport class Metrics extends Component {\n  constructor(props) {\n    super(props); // // This will allow setMetricID to use state in this component\n    // this.setMetricID = this.setMetricID.bind(this)\n\n    this.state = {\n      metrics: this.props.metrics,\n      // Represents all relevant information of a metric area\n      metricAreaInfo: \"test\",\n      metricAreaID: null\n    };\n  }\n\n  render() {\n    return (// Eventually need to pass in metric values as props\n      // console.log\n      React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, this.props.metrics.map(item => {\n        // Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\n        return React.createElement(MetricAreaCard, {\n          metricName: item,\n          metricFunc: this.props.metricIfCallback,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        });\n      })))\n    );\n  }\n\n} // Represents a single metric button to render. A single metric card will contain the name of the metric\n// and acts as a link to the dashboard of the respective metric. \n\nclass MetricAreaCard extends Component {\n  constructor(props) {\n    super(props);\n    this.metricFunc = this.metricFunc.bind(this);\n    this.state = {\n      // metricFunc: this.metricFunc.bind(this),\n      metricName: this.props.metricName,\n      metricAreaID: \"test\"\n    };\n  } // To do. What does a spread operator look like?\n\n\n  render() {\n    return (// When a link is clicked, retrieve the necessary information from firebase and then put it into metricAreaInfo\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: '/Metrics/' + this.props.metricName,\n        onClick: this.props.metricFunc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, this.props.metricName))\n    );\n  }\n\n}","map":{"version":3,"sources":["C:/Users/nathan/go/src/insightful/insightful/src/Metrics.js"],"names":["React","Component","Switch","Route","Link","Button","ButtonGroup","ButtonToolbar","Card","CardImg","CardText","CardBody","CardTitle","CardDeck","CardGroup","firebase","DashBoard","Metrics","constructor","props","state","metrics","metricAreaInfo","metricAreaID","render","map","item","metricIfCallback","MetricAreaCard","metricFunc","bind","metricName"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,QAAoC,kBAApC;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,aAA9B,QAAmD,YAAnD;AACA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,QAAxB,EAAkCC,QAAlC,EAA4CC,SAA5C,EAAuDC,QAAvD,EAAiEC,SAAjE,QAAkF,YAAlF;AACA,OAAO,mBAAP;AACA,OAAO,YAAP;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAO,MAAMC,OAAN,SAAsBhB,SAAtB,CAAgC;AAEnCiB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAEf;AACA;;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,KAAKF,KAAL,CAAWE,OADX;AAET;AACAC,MAAAA,cAAc,EAAE,MAHP;AAITC,MAAAA,YAAY,EAAE;AAJL,KAAb;AAMH;;AAGDC,EAAAA,MAAM,GAAG;AACL,WACI;AACA;AACA,0BAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEQ,KAAKL,KAAL,CAAWE,OAAX,CAAmBI,GAAnB,CAAwBC,IAAD,IAAU;AAC7B;AACA,eAAO,oBAAC,cAAD;AACH,UAAA,UAAU,EAAEA,IADT;AAEH,UAAA,UAAU,EAAE,KAAKP,KAAL,CAAWQ,gBAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAIH,OAND,CAFR,CAJJ;AAHJ;AAoBH;;AApCkC,C,CAuCvC;AACA;;AACA,MAAMC,cAAN,SAA6B3B,SAA7B,CAAuC;AACnCiB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKU,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKV,KAAL,GAAa;AACT;AACAW,MAAAA,UAAU,EAAE,KAAKZ,KAAL,CAAWY,UAFd;AAGTR,MAAAA,YAAY,EAAE;AAHL,KAAb;AAKH,GATkC,CAUnC;;;AAEAC,EAAAA,MAAM,GAAG;AACL,WACI;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAE,cAAc,KAAKL,KAAL,CAAWY,UAAnC;AAA+C,QAAA,OAAO,EAAE,KAAKZ,KAAL,CAAWU,UAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgF,KAAKV,KAAL,CAAWY,UAA3F,CADJ;AAFJ;AAMH;;AAnBkC","sourcesContent":["import React, { Component } from 'react';\r\nimport { Switch, Route, Link } from 'react-router-dom';\r\nimport { Button, ButtonGroup, ButtonToolbar } from 'reactstrap';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\r\nimport './css/Metrics.css';\r\nimport './index.js';\r\nimport firebase from 'firebase/app';\r\nimport { DashBoard } from './DashBoard';\r\n\r\nexport class Metrics extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        // // This will allow setMetricID to use state in this component\r\n        // this.setMetricID = this.setMetricID.bind(this)\r\n        this.state = {\r\n            metrics: this.props.metrics,\r\n            // Represents all relevant information of a metric area\r\n            metricAreaInfo: \"test\",\r\n            metricAreaID: null\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            // Eventually need to pass in metric values as props\r\n            // console.log\r\n            <Switch>\r\n                {/* <Route path=\"/Metrics/:metricID\" render={(props) => <DashBoard {...props}\r\n                    metricAreaInfo={this.state.metricAreaInfo} />} /> */}\r\n                {/* <Route path=\"/Metrics/:metricID\" render={this.setMetricID}/> */}\r\n                <div>\r\n                    {\r\n                        this.props.metrics.map((item) => {\r\n                            // Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\r\n                            return <MetricAreaCard\r\n                                metricName={item}\r\n                                metricFunc={this.props.metricIfCallback}\r\n                            />\r\n                        })\r\n                    }\r\n                </div>\r\n            </Switch>\r\n        )\r\n    }\r\n}\r\n\r\n// Represents a single metric button to render. A single metric card will contain the name of the metric\r\n// and acts as a link to the dashboard of the respective metric. \r\nclass MetricAreaCard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.metricFunc = this.metricFunc.bind(this);\r\n        this.state = {\r\n            // metricFunc: this.metricFunc.bind(this),\r\n            metricName: this.props.metricName,\r\n            metricAreaID: \"test\"\r\n        }\r\n    }\r\n    // To do. What does a spread operator look like?\r\n\r\n    render() {\r\n        return (\r\n            // When a link is clicked, retrieve the necessary information from firebase and then put it into metricAreaInfo\r\n            <div>\r\n                <Link to={'/Metrics/' + this.props.metricName} onClick={this.props.metricFunc}>{this.props.metricName}</Link>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}