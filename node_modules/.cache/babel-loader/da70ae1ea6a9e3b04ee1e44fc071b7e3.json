{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\inSightful\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\inSightful\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\inSightful\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\inSightful\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\inSightful\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\inSightful\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from'react';import{Switch,Route,Link}from'react-router-dom';import{Button,ButtonGroup,ButtonToolbar}from'reactstrap';import{Card,CardImg,CardText,CardBody,CardTitle,CardDeck,CardGroup}from'reactstrap';import'./css/Metrics.css';import'./index.js';import firebase from'firebase/app';import{DashBoard}from'./DashBoard';export var Metrics=/*#__PURE__*/function(_Component){_inherits(Metrics,_Component);function Metrics(props){var _this;_classCallCheck(this,Metrics);_this=_possibleConstructorReturn(this,_getPrototypeOf(Metrics).call(this,props));_this.renderMetricCalculations=function(routerProps){// Retrieve all relevant information for a metric area \nvar rootPath=firebase.database().ref('metricCalculations');rootPath.once('value',function(snapshot){var metricCalcInfo=snapshot.val();var databaseKeys=Object.keys(metricCalcInfo);var owner=null;var mapCalculations=new Map();var metricAreaCalculationIDs=databaseKeys.map(function(key){var id=metricCalcInfo[key].metricAreaID;if(id==_this.state.metricAreaID){owner=metricCalcInfo[key].owner;mapCalculations.set(key,metricCalcInfo[key]);return metricCalcInfo[key].metricCalculationID;}});// Set the state to the new values that were obtained\n_this.setCalculations(owner,mapCalculations,metricAreaCalculationIDs);});return React.createElement(DashBoard,Object.assign({},routerProps,{metricAreaInfo:_this.state.metricAreaInfo,metricAreaID:_this.state.metricAreaID,metricAreaOwner:_this.state.metricAreaOwner,metricAreaCalculations:_this.state.metricAreaCalculations,metricAreaCalculationIDs:_this.state.metricAreaCalculationIDs}));};_this.setMetricName=_this.setMetricName.bind(_assertThisInitialized(_this));_this.state={// Data to be passed into metric calculations\n// Represents metricAreaName\nmetricAreaInfo:null,// Contains metric area name\nmetricAreaID:null,// Contains metric area ID\nmetricAreaOwner:null,// Contains metric area owner name\nmetricAreaCalculations:new Map(),// Represents all calculations for a metric area\nmetricAreaCalculationIDs:[]};return _this;}// Callback to render new information\n_createClass(Metrics,[{key:\"setCalculations\",value:function setCalculations(owner,mapCalculations,metricAreaCalculationIDs){this.setState(function(state){state.metricAreaOwner=owner;state.metricAreaCalculations=mapCalculations;state.metricAreaCalculationIDs=metricAreaCalculationIDs;return state;});}// Render dashboard page and send it the necessary props\n},{key:\"setMetricName\",value:function setMetricName(name,id){this.setState({metricAreaInfo:name,metricAreaID:id});}},{key:\"metricAreaElements\",value:function metricAreaElements(){var _this2=this;var metricAreaElements=Array.from(this.props.metrics.entries()).map(function(key){// Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\nreturn React.createElement(MetricAreaCard,{metricName:key[0],metricID:key[1],metricNameFunc:_this2.setMetricName});});return metricAreaElements;}},{key:\"render\",value:function render(){var metricAreaElements=this.metricAreaElements();return React.createElement(\"div\",null,React.createElement(\"h1\",null,\" Metric Dashboard \"),React.createElement(Switch,null,React.createElement(Route,{path:\"/Metrics/:metricID\",render:this.renderMetricCalculations}),React.createElement(\"div\",null,React.createElement(CardDeck,{className:\"metricsDeck\"},metricAreaElements))));}}]);return Metrics;}(Component);// Represents a single metric button to render. A single metric card will contain the name of the metric\n// and acts as a link to the dashboard of the respective metric. \nvar MetricAreaCard=/*#__PURE__*/function(_Component2){_inherits(MetricAreaCard,_Component2);function MetricAreaCard(props){_classCallCheck(this,MetricAreaCard);return _possibleConstructorReturn(this,_getPrototypeOf(MetricAreaCard).call(this,props));}_createClass(MetricAreaCard,[{key:\"render\",value:function render(){var _this3=this;return(// When a link is clicked, retrieve the necessary information from firebase and then put it into metricAreaInfo\n// <div>\n//     <Link to={'/Metrics/' + this.props.metricName} onClick={()=>this.props.metricNameFunc(this.props.metricName, this.props.metricID)}>{this.props.metricName}</Link>\n// </div>\nReact.createElement(Card,{className:\"metrics\",border:\"primary\"},React.createElement(CardBody,{className:\"metricsBody\"},React.createElement(Link,{to:'/Metrics/'+this.props.metricName,onClick:function onClick(){return _this3.props.metricNameFunc(_this3.props.metricName,_this3.props.metricID);}},this.props.metricName))));}}]);return MetricAreaCard;}(Component);","map":{"version":3,"sources":["C:/Users/nathan/go/src/insightful/src/Metrics.js"],"names":["React","Component","Switch","Route","Link","Button","ButtonGroup","ButtonToolbar","Card","CardImg","CardText","CardBody","CardTitle","CardDeck","CardGroup","firebase","DashBoard","Metrics","props","renderMetricCalculations","routerProps","rootPath","database","ref","once","snapshot","metricCalcInfo","val","databaseKeys","Object","keys","owner","mapCalculations","Map","metricAreaCalculationIDs","map","key","id","metricAreaID","state","set","metricCalculationID","setCalculations","metricAreaInfo","metricAreaOwner","metricAreaCalculations","setMetricName","bind","setState","name","metricAreaElements","Array","from","metrics","entries","MetricAreaCard","metricName","metricNameFunc","metricID"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Switch, Route, Link } from 'react-router-dom';\r\nimport { Button, ButtonGroup, ButtonToolbar } from 'reactstrap';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\r\nimport './css/Metrics.css';\r\nimport './index.js';\r\nimport firebase from 'firebase/app';\r\nimport { DashBoard } from './DashBoard';\r\n\r\nexport class Metrics extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.setMetricName = this.setMetricName.bind(this)\r\n        this.state = {\r\n            // Data to be passed into metric calculations\r\n            // Represents metricAreaName\r\n            metricAreaInfo: null,   // Contains metric area name\r\n            metricAreaID: null,     // Contains metric area ID\r\n            metricAreaOwner: null,  // Contains metric area owner name\r\n            metricAreaCalculations: new Map(), // Represents all calculations for a metric area\r\n            metricAreaCalculationIDs: []\r\n        }\r\n    }\r\n\r\n    // Callback to render new information\r\n    setCalculations(owner, mapCalculations, metricAreaCalculationIDs) {\r\n        this.setState((state) => {\r\n            state.metricAreaOwner = owner\r\n            state.metricAreaCalculations = mapCalculations\r\n            state.metricAreaCalculationIDs = metricAreaCalculationIDs\r\n            return state\r\n        })\r\n    }\r\n\r\n    // Render dashboard page and send it the necessary props\r\n    renderMetricCalculations = (routerProps) => {\r\n\r\n        // Retrieve all relevant information for a metric area \r\n        let rootPath = firebase.database().ref('metricCalculations')\r\n\r\n        rootPath.once('value', (snapshot) => {\r\n            let metricCalcInfo = snapshot.val();\r\n            let databaseKeys = Object.keys(metricCalcInfo);\r\n            let owner = null\r\n            let mapCalculations = new Map()\r\n            \r\n            let metricAreaCalculationIDs = databaseKeys.map((key) => {\r\n                let id = metricCalcInfo[key].metricAreaID\r\n                if (id == this.state.metricAreaID) {\r\n                    owner = metricCalcInfo[key].owner\r\n                    mapCalculations.set(key, metricCalcInfo[key])\r\n                    return metricCalcInfo[key].metricCalculationID\r\n                }\r\n            })\r\n\r\n            // Set the state to the new values that were obtained\r\n            this.setCalculations(owner, mapCalculations, metricAreaCalculationIDs)\r\n        });\r\n\r\n        return <DashBoard\r\n                {...routerProps}\r\n                metricAreaInfo={this.state.metricAreaInfo}\r\n                metricAreaID={this.state.metricAreaID}\r\n                metricAreaOwner={this.state.metricAreaOwner}\r\n                metricAreaCalculations={this.state.metricAreaCalculations}\r\n                metricAreaCalculationIDs={this.state.metricAreaCalculationIDs}\r\n                />\r\n    }\r\n\r\n    setMetricName(name, id) {\r\n        this.setState({ \r\n            metricAreaInfo: name,\r\n            metricAreaID: id\r\n        })\r\n    }\r\n\r\n    metricAreaElements() {\r\n        const metricAreaElements = Array.from(this.props.metrics.entries()).map((key) => {\r\n            // Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\r\n            return <MetricAreaCard\r\n                metricName={key[0]}\r\n                metricID={key[1]}\r\n                metricNameFunc={this.setMetricName}\r\n            />\r\n        })\r\n        return metricAreaElements\r\n    }\r\n\r\n    render() {\r\n        const metricAreaElements = this.metricAreaElements()\r\n\r\n        return (\r\n            <div>\r\n                <h1> Metric Dashboard </h1>\r\n                <Switch>\r\n                    <Route path=\"/Metrics/:metricID\" render={this.renderMetricCalculations} />\r\n                    <div>\r\n                        <CardDeck className = 'metricsDeck'>\r\n                        { metricAreaElements}\r\n                        </CardDeck>\r\n                    </div>\r\n                </Switch> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// Represents a single metric button to render. A single metric card will contain the name of the metric\r\n// and acts as a link to the dashboard of the respective metric. \r\nclass MetricAreaCard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // When a link is clicked, retrieve the necessary information from firebase and then put it into metricAreaInfo\r\n            // <div>\r\n            //     <Link to={'/Metrics/' + this.props.metricName} onClick={()=>this.props.metricNameFunc(this.props.metricName, this.props.metricID)}>{this.props.metricName}</Link>\r\n            // </div>\r\n            <Card className = 'metrics' border=\"primary\">\r\n                <CardBody className='metricsBody'>\r\n                <Link to={'/Metrics/' + this.props.metricName} onClick={()=>this.props.metricNameFunc(this.props.metricName, this.props.metricID)}>{this.props.metricName}</Link>\r\n                </CardBody>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}