{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\insightful\\\\insightful\\\\src\\\\DashBoard.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport { Table, Button, ButtonGroup, ButtonToolbar } from 'reactstrap';\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\nimport './index.js';\nimport './css/DashBoard.css';\nimport firebase from 'firebase/app';\nexport class DashBoard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renderMetricMonthly = () => {\n      let rootPath = firebase.database().ref('metricGoalsMonths');\n      let monthMap = new Map();\n      rootPath.once('value', snapshot => {\n        let info = snapshot.val();\n        let keys = Object.keys(info);\n        keys.map(key => {\n          let intKey = parseInt(key, 10); // If the our prop of metric calculation IDs contains the ID, add it to the month map.\n\n          if (this.props.metricAreaCalculationIDs.includes(intKey)) {\n            monthMap.set(key, info[key]);\n          }\n        });\n        this.arrayMonthCalculations(monthMap);\n      });\n    };\n\n    this.renderMetricQuarterly = () => {\n      let rootPath = firebase.database().ref('metricGoalsQuarters');\n      let quarterMap = new Map();\n      rootPath.once('value', snapshot => {\n        let info = snapshot.val();\n        let keys = Object.keys(info);\n        keys.map(key => {\n          let intKey = parseInt(key, 10);\n\n          if (this.props.metricAreaCalculationIDs.includes(intKey)) {\n            quarterMap.set(key, info[key]);\n          }\n        });\n        this.arrayQuarterCalculations(quarterMap);\n      });\n    };\n\n    this.state = {\n      // Calculations should have the same array lengths...\n      // Work on centralizing the data so we aren't hoping\n      // everything is operating on the same index of the array\n      metricAreaCalculationsMonth: [],\n      metricAreaCalculationsQuarter: [],\n      metricAreaCalculationsAnnual: [],\n      currentCalculation: 0 // Will always default to the first value in an array\n\n    };\n  } // Do any information retrieval here\n\n\n  componentDidMount() {\n    // Retrieve monthly information for a metric calculation\n    this.renderMetricMonthly();\n    this.renderMetricQuarterly();\n  } // Convert map to an array in the state\n\n\n  arrayMonthCalculations(map) {\n    this.setState(state => {\n      let monthArray = Array.from(map.entries()).map(key => {\n        return key;\n      });\n      state.metricAreaCalculationsMonth = monthArray;\n      return state;\n    });\n  } // Convert a map to an array in the state\n\n\n  arrayQuarterCalculations(map) {\n    this.setState(state => {\n      let quarterArray = Array.from(map.entries()).map(key => {\n        return key;\n      });\n      state.metricAreaCalculationsQuarter = quarterArray;\n      return state;\n    });\n  }\n\n  // leftButtonClick() {\n  //     let intVal = this.state.currentCalculation\n  //     this.setState((state) => {\n  //         if (intVal = 0) {\n  //             state.currentCalculation = state.metricAreaCalculationsMonth.length - 1\n  //         } else {\n  //             state.currentCalculation = intVal - 1\n  //         }\n  //     })\n  // }\n  render() {\n    let metricElements = Array.from(this.props.metricAreaCalculations.entries()).map(key => {\n      //Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\n      return React.createElement(MetricCalculationRow, {\n        metrics: key[1].metric,\n        metricCalc: key[1].metricCalculation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      });\n    });\n    let leftButtonString = \"<\";\n    let rightButtonString = \">\";\n    let currentNumCalc = this.state.currentCalculation; // Metrics for monthly information\n\n    let currentMonthCalc = this.state.metricAreaCalculationsMonth;\n    let calculationInfo = currentMonthCalc[currentNumCalc];\n    let monthArrayInfo = []; // Render if not undefined/null for month information\n\n    if (calculationInfo) {\n      let calculationKeys = calculationInfo[1];\n      let keys = Object.keys(calculationKeys);\n      monthArrayInfo = keys.map(key => {\n        let monthInfo = calculationKeys[key];\n        return React.createElement(MetricMonthly, {\n          target: monthInfo.target,\n          month: monthInfo.month,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        });\n      });\n    } // Metrics for quarterly information\n\n\n    let currentQuarterCalc = this.state.metricAreaCalculationsQuarter;\n    let calculationInfoQuarter = currentQuarterCalc[currentNumCalc];\n    let quarterArrayInfo = [];\n\n    if (calculationInfoQuarter) {\n      let calculationKeys = calculationInfoQuarter[1];\n      let keys = Object.keys(calculationKeys); // monthArrayInfo = keys.map((key) => {\n      //     quarterArrayInfo = calculationKeys[key]\n      //     return <MetricQuarterly\n      //                 target={quarterArrayInfo.target}\n      //                 quarter={quarterArrayInfo.quarter}\n      //             />\n      // })\n    }\n\n    return React.createElement(\"div\", {\n      className: \"body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \" \", this.props.metricAreaInfo, \" \"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \" \", this.props.metricAreaID, \" \"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \" Metric Area Summary \"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \" Owner: \", this.props.metricAreaOwner, \" \"), React.createElement(Table, {\n      bordered: true,\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \" Metric \"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \" Metric Calculations \"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, metricElements)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, leftButtonString), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, rightButtonString)), monthArrayInfo));\n  }\n\n} // Represents a single row in the metric/metric calculations table\n// Contains all metric name and metric calculation names for a metric area\n\nclass MetricCalculationRow extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, this.props.metrics), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, this.props.metricCalc));\n  }\n\n}\n\nclass MetricMonthly extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {}\n\n  month(num) {\n    switch (num) {\n      case 1:\n        return \"January\";\n\n      case 2:\n        return \"February\";\n\n      case 3:\n        return \"March\";\n\n      case 4:\n        return \"April\";\n\n      case 5:\n        return \"May\";\n\n      case 6:\n        return \"June\";\n\n      case 7:\n        return \"July\";\n\n      case 8:\n        return \"August\";\n\n      case 9:\n        return \"September\";\n\n      case 10:\n        return \"October\";\n\n      case 11:\n        return \"November\";\n\n      case 12:\n        return \"December\";\n    }\n  }\n\n  render() {\n    let actualValue = this.props.actual;\n    let monthValue = this.month(this.props.month); // If there is no value existing for the actual yet\n\n    if (!actualValue) {\n      actualValue = \"N/A\";\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, monthValue), React.createElement(Table, {\n      responsive: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"Actual\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, \"Target\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, actualValue), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, this.props.target)))));\n  }\n\n}\n\nclass MetricQuarterly extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, React.createElement(Table, {\n      responsive: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, \"Actual\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, \"Target\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, this.props.actual), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, this.props.target)))));\n  }\n\n}\n\nclass MetricAnnuals extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, \"Actual\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, \"Target\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, \"Highlights\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, \"Lowlights\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, \"Correction of Error\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, this.props.actual), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, this.props.target), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, this.props.highlight), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, this.props.lowlight), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, this.props.correction)))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/nathan/go/src/insightful/insightful/src/DashBoard.js"],"names":["React","Component","BrowserRouter","Router","Route","Link","Table","Button","ButtonGroup","ButtonToolbar","Card","CardImg","CardText","CardBody","CardTitle","CardDeck","CardGroup","firebase","DashBoard","constructor","props","renderMetricMonthly","rootPath","database","ref","monthMap","Map","once","snapshot","info","val","keys","Object","map","key","intKey","parseInt","metricAreaCalculationIDs","includes","set","arrayMonthCalculations","renderMetricQuarterly","quarterMap","arrayQuarterCalculations","state","metricAreaCalculationsMonth","metricAreaCalculationsQuarter","metricAreaCalculationsAnnual","currentCalculation","componentDidMount","setState","monthArray","Array","from","entries","quarterArray","render","metricElements","metricAreaCalculations","metric","metricCalculation","leftButtonString","rightButtonString","currentNumCalc","currentMonthCalc","calculationInfo","monthArrayInfo","calculationKeys","monthInfo","target","month","currentQuarterCalc","calculationInfoQuarter","quarterArrayInfo","metricAreaInfo","metricAreaID","metricAreaOwner","MetricCalculationRow","metrics","metricCalc","MetricMonthly","num","actualValue","actual","monthValue","MetricQuarterly","MetricAnnuals","highlight","lowlight","correction"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link} from 'react-router-dom';\r\nimport { Table, Button, ButtonGroup, ButtonToolbar} from 'reactstrap';\r\nimport {Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\r\n\r\nimport './index.js';\r\nimport './css/DashBoard.css';\r\n\r\nimport firebase from 'firebase/app';\r\n\r\nexport class DashBoard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            // Calculations should have the same array lengths...\r\n            // Work on centralizing the data so we aren't hoping\r\n            // everything is operating on the same index of the array\r\n            metricAreaCalculationsMonth: [],\r\n            metricAreaCalculationsQuarter: [],\r\n            metricAreaCalculationsAnnual: [],\r\n            currentCalculation: 0 // Will always default to the first value in an array\r\n        }\r\n    }\r\n\r\n    // Do any information retrieval here\r\n    componentDidMount() {\r\n        // Retrieve monthly information for a metric calculation\r\n        this.renderMetricMonthly()\r\n        this.renderMetricQuarterly()    \r\n    }\r\n\r\n    // Convert map to an array in the state\r\n    arrayMonthCalculations(map) {\r\n        this.setState((state) => {\r\n            let monthArray = Array.from(map.entries()).map((key) => {\r\n                return key\r\n            })\r\n            state.metricAreaCalculationsMonth = monthArray\r\n            return state\r\n        })\r\n    }\r\n    \r\n    // Convert a map to an array in the state\r\n    arrayQuarterCalculations(map) {\r\n        this.setState((state) => {\r\n            let quarterArray = Array.from(map.entries()).map((key) => {\r\n                return key\r\n            })\r\n            state.metricAreaCalculationsQuarter = quarterArray\r\n            return state\r\n        })\r\n    }\r\n\r\n    renderMetricMonthly = () => {\r\n        let rootPath = firebase.database().ref('metricGoalsMonths')\r\n        let monthMap = new Map()\r\n\r\n        rootPath.once('value', (snapshot) => {\r\n            let info = snapshot.val();\r\n            let keys = Object.keys(info);\r\n            keys.map((key) => {\r\n                let intKey = parseInt(key, 10)\r\n                // If the our prop of metric calculation IDs contains the ID, add it to the month map.\r\n                if (this.props.metricAreaCalculationIDs.includes(intKey)) {\r\n                    monthMap.set(key, info[key])\r\n                }\r\n            })\r\n            this.arrayMonthCalculations(monthMap)\r\n        })\r\n    }\r\n\r\n    renderMetricQuarterly = () => {\r\n        let rootPath = firebase.database().ref('metricGoalsQuarters')\r\n        let quarterMap = new Map()\r\n\r\n        rootPath.once('value', (snapshot) => {\r\n            let info = snapshot.val();\r\n            let keys = Object.keys(info);\r\n            keys.map((key) => {\r\n                let intKey = parseInt(key, 10)\r\n                if (this.props.metricAreaCalculationIDs.includes(intKey)) {\r\n                    quarterMap.set(key, info[key])\r\n                }\r\n            })\r\n            this.arrayQuarterCalculations(quarterMap)\r\n        })\r\n    }\r\n\r\n    // leftButtonClick() {\r\n    //     let intVal = this.state.currentCalculation\r\n    //     this.setState((state) => {\r\n    //         if (intVal = 0) {\r\n    //             state.currentCalculation = state.metricAreaCalculationsMonth.length - 1\r\n    //         } else {\r\n    //             state.currentCalculation = intVal - 1\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    render() {\r\n        let metricElements = Array.from(this.props.metricAreaCalculations.entries()).map((key) => {\r\n            //Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\r\n            return <MetricCalculationRow\r\n                    metrics={key[1].metric}\r\n                    metricCalc={key[1].metricCalculation}\r\n                    />\r\n        })\r\n\r\n        let leftButtonString = \"<\"\r\n        let rightButtonString = \">\"\r\n\r\n\r\n        let currentNumCalc = this.state.currentCalculation\r\n\r\n        // Metrics for monthly information\r\n        let currentMonthCalc = this.state.metricAreaCalculationsMonth\r\n        let calculationInfo = currentMonthCalc[currentNumCalc]\r\n        let monthArrayInfo = []\r\n\r\n        // Render if not undefined/null for month information\r\n        if (calculationInfo) {\r\n            let calculationKeys = calculationInfo[1]\r\n            let keys = Object.keys(calculationKeys)\r\n            monthArrayInfo = keys.map((key) => {\r\n                let monthInfo = calculationKeys[key]\r\n                return <MetricMonthly\r\n                            target={monthInfo.target}\r\n                            month={monthInfo.month}\r\n                        />\r\n            })\r\n        }\r\n\r\n        // Metrics for quarterly information\r\n        let currentQuarterCalc = this.state.metricAreaCalculationsQuarter\r\n        let calculationInfoQuarter = currentQuarterCalc[currentNumCalc]\r\n        let quarterArrayInfo = []\r\n\r\n        if (calculationInfoQuarter) {\r\n            let calculationKeys = calculationInfoQuarter[1]\r\n            let keys = Object.keys(calculationKeys)\r\n            // monthArrayInfo = keys.map((key) => {\r\n            //     quarterArrayInfo = calculationKeys[key]\r\n            //     return <MetricQuarterly\r\n            //                 target={quarterArrayInfo.target}\r\n            //                 quarter={quarterArrayInfo.quarter}\r\n            //             />\r\n            // })\r\n        }\r\n\r\n\r\n        return(        \r\n            <div className = \"body\">\r\n            <h1> {this.props.metricAreaInfo} </h1>\r\n            <h1> {this.props.metricAreaID} </h1>\r\n            <h2> Metric Area Summary </h2>\r\n            <h3> Owner: {this.props.metricAreaOwner} </h3>\r\n\r\n            <Table bordered align=\"center\">\r\n                <thead>\r\n                    <tr>\r\n                    <th> Metric </th>\r\n                    <th> Metric Calculations </th>\r\n\r\n                    </tr>\r\n                </thead>\r\n\r\n\r\n                {/* Table representing metric and metric caluclation */}\r\n                <tbody>\r\n                    {metricElements}\r\n                </tbody>\r\n            </Table>\r\n\r\n            {/* Container for current  */}\r\n            <div>\r\n                <div>\r\n                    <Button>   \r\n                        {leftButtonString}\r\n                    </Button>\r\n                    <Button>\r\n                        {rightButtonString}\r\n                    </Button>\r\n                </div>\r\n\r\n                {/* Monthly Information */}\r\n                {monthArrayInfo}\r\n            \r\n                {/* Quarterly Information */}\r\n                {/* {quarterArrayInfo} */}\r\n\r\n                {/* Yearly Information */}\r\n                {}\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n// Represents a single row in the metric/metric calculations table\r\n// Contains all metric name and metric calculation names for a metric area\r\nclass MetricCalculationRow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <th>\r\n                    {this.props.metrics}\r\n                </th>\r\n                <th>\r\n                    {this.props.metricCalc}\r\n                </th>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nclass MetricMonthly extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    month(num) {\r\n        switch(num) {\r\n            case 1:\r\n                return \"January\"\r\n            case 2:\r\n                return \"February\"\r\n            case 3: \r\n                return \"March\"\r\n            case 4:\r\n                return \"April\"\r\n            case 5:\r\n                return \"May\"\r\n            case 6: \r\n                return \"June\"\r\n            case 7:\r\n                return \"July\"\r\n            case 8:\r\n                return \"August\"\r\n            case 9:\r\n                return \"September\"\r\n            case 10:\r\n                return \"October\"\r\n            case 11:\r\n                return \"November\"\r\n            case 12:\r\n                return \"December\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let actualValue = this.props.actual\r\n        let monthValue = this.month(this.props.month)\r\n\r\n        // If there is no value existing for the actual yet\r\n        if (!actualValue) {\r\n            actualValue = \"N/A\"\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h2>{monthValue}</h2>\r\n                <Table responsive>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Actual</th>\r\n                            <th>Target</th>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>{actualValue}</th>\r\n                            <th>{this.props.target}</th>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass MetricQuarterly extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Table responsive>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Actual</th>\r\n                            <th>Target</th>\r\n                            {/* <th>Highlights</th>\r\n                            <th>Lowlights</th>\r\n                            <th>Correction of Error</th> */}\r\n                        </tr>\r\n                        <tr>\r\n                            <th>{this.props.actual}</th>\r\n                            <th>{this.props.target}</th>\r\n                            {/* <th>{this.props.highlight}</th>\r\n                            <th>{this.props.lowlight}</th>\r\n                            <th>{this.props.correction}</th> */}\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass MetricAnnuals extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Actual</th>\r\n                            <th>Target</th>\r\n                            <th>Highlights</th>\r\n                            <th>Lowlights</th>\r\n                            <th>Correction of Error</th>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>{this.props.actual}</th>\r\n                            <th>{this.props.target}</th>\r\n                            <th>{this.props.highlight}</th>\r\n                            <th>{this.props.lowlight}</th>\r\n                            <th>{this.props.correction}</th>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}