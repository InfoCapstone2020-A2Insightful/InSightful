{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\Insightful\\\\insightful\\\\src\\\\Metrics.js\";\nimport React, { Component } from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport { Button, ButtonGroup, ButtonToolbar } from 'reactstrap';\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\nimport './css/Metrics.css';\nimport './index.js';\nimport { DashBoard } from './DashBoard';\nexport class Metrics extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      metrics: this.props.metrics,\n      metricAreaInfo: []\n    };\n  }\n\n  render() {\n    return (// Eventually need to pass in metric values as props from app.js...\n      React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(Route, {\n        path: \"/Metrics/:metricID\",\n        render: props => React.createElement(DashBoard, Object.assign({}, props, {\n          metricAreaInfo: this.props.metricAreaInfo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, this.props.metrics.map(item => {\n        // Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\n        return React.createElement(MetricAreaCard, {\n          metricName: item,\n          metricID: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        });\n      })))\n    );\n  }\n\n} // Represents a single metric button to render. A single metric card will contain the name of the metric\n// and acts as a link to the dashboard of the respective metric. \n\nclass MetricAreaCard extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (// When a link is clicked, retrieve the necessary information from firebase and then put it into metricAreaInfo\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: '/Metrics/' + this.props.metricID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, this.props.metricName))\n    );\n  }\n\n}","map":{"version":3,"sources":["C:/Users/nathan/go/src/Insightful/insightful/src/Metrics.js"],"names":["React","Component","Switch","Route","Link","Button","ButtonGroup","ButtonToolbar","Card","CardImg","CardText","CardBody","CardTitle","CardDeck","CardGroup","DashBoard","Metrics","constructor","props","state","metrics","metricAreaInfo","render","map","item","MetricAreaCard","metricID","metricName"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,QAAmC,kBAAnC;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,aAA9B,QAAkD,YAAlD;AACA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,QAAxB,EAAkCC,QAAlC,EAA4CC,SAA5C,EAAuDC,QAAvD,EAAiEC,SAAjE,QAAkF,YAAlF;AACA,OAAO,mBAAP;AACA,OAAO,YAAP;AAEA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAO,MAAMC,OAAN,SAAsBf,SAAtB,CAAgC;AAEnCgB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,KAAKF,KAAL,CAAWE,OADX;AAETC,MAAAA,cAAc,EAAE;AAFP,KAAb;AAIH;;AAEDC,EAAAA,MAAM,GAAG;AACL,WACI;AACA,0BAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,oBAAZ;AAAiC,QAAA,MAAM,EAAGJ,KAAD,IAAW,oBAAC,SAAD,oBAAeA,KAAf;AACA,UAAA,cAAc,EAAE,KAAKA,KAAL,CAAWG,cAD3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEQ,KAAKH,KAAL,CAAWE,OAAX,CAAmBG,GAAnB,CAAwBC,IAAD,IAAU;AAC7B;AACA,eAAO,oBAAC,cAAD;AACC,UAAA,UAAU,EAAEA,IADb;AAEC,UAAA,QAAQ,EAAEA,IAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAIH,OAND,CAFR,CAHJ;AAFJ;AAkBH;;AA7BkC,C,CAgCvC;AACA;;AACA,MAAMC,cAAN,SAA6BxB,SAA7B,CAAuC;AAEnCgB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AAEDI,EAAAA,MAAM,GAAG;AACL,WACI;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAE,cAAc,KAAKJ,KAAL,CAAWQ,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8C,KAAKR,KAAL,CAAWS,UAAzD,CADJ;AAFJ;AAMH;;AAbkC","sourcesContent":["import React, { Component } from 'react';\r\nimport { Switch, Route, Link} from 'react-router-dom';\r\nimport { Button, ButtonGroup, ButtonToolbar} from 'reactstrap';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\r\nimport './css/Metrics.css';\r\nimport './index.js';\r\n\r\nimport { DashBoard } from './DashBoard';\r\n\r\nexport class Metrics extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            metrics: this.props.metrics,\r\n            metricAreaInfo: []\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            // Eventually need to pass in metric values as props from app.js...\r\n            <Switch>\r\n                <Route path=\"/Metrics/:metricID\" render={(props) => <DashBoard {...props} \r\n                                                                    metricAreaInfo={this.props.metricAreaInfo}/> } />\r\n                <div>\r\n                    {\r\n                        this.props.metrics.map((item) => {\r\n                            // Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\r\n                            return <MetricAreaCard \r\n                                    metricName={item}\r\n                                    metricID={item}\r\n                                    />\r\n                        })\r\n                    }\r\n                </div>\r\n            </Switch>\r\n        )\r\n    }\r\n}\r\n\r\n// Represents a single metric button to render. A single metric card will contain the name of the metric\r\n// and acts as a link to the dashboard of the respective metric. \r\nclass MetricAreaCard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // When a link is clicked, retrieve the necessary information from firebase and then put it into metricAreaInfo\r\n            <div>\r\n                <Link to={'/Metrics/' + this.props.metricID}>{this.props.metricName}</Link>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}