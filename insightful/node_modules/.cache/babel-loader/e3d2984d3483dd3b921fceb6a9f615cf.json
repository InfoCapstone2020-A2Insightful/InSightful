{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\insightful\\\\insightful\\\\src\\\\Metrics.js\";\nimport React, { Component } from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport { Button, ButtonGroup, ButtonToolbar } from 'reactstrap';\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\nimport './css/Metrics.css';\nimport './index.js';\nimport firebase from 'firebase/app';\nimport { DashBoard } from './DashBoard';\nexport class Metrics extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renderMetricCalculations = routerProps => {\n      let rootPath = firebase.database().ref('metricCalculations');\n      rootPath.once('value', snapshot => {\n        let metricCalcInfo = snapshot.val();\n        let databaseKeys = Object.keys(metricCalcInfo); // Need to find every metricCalculation that has the same metricAreaID and put it in a map\n\n        let test = databaseKeys.map(key => {\n          console.log(this.state.metricAreaID); // console.log(metricCalcInfo[key])\n          // let calcPath = firebase.database().ref('metricCalculations').child(key).child('metricAreaID')\n          // calcPath.once('value', (snapshotTwo) => {\n          //     let valTest = snapshotTwo.val()\n          //     console.log(valTest)\n          //     let databaseKeys2 = Object.keys(valTest)\n          //     console.log(databaseKeys2)\n          //     // console.log(valTest)\n          //     // if (valTest = this.state.metricID) {\n          //     //     console.log(\"IDs match.\")\n          //     //     console.log(valTest)\n          //     //     console.log(this.state.metricID)\n          //     // } else {\n          //     //     console.log(\"IDs do not match.\")\n          //     // }\n          //     databaseKeys2.map((key2) => {\n          //         console.log(key2)\n          //     })\n          // })\n          // if (metricAreaID = this.state.metricAreaID) {\n          //     console.log('ID is the same')\n          // } else {\n          //     console.log('ID is not the same')\n          // }\n        });\n      });\n      return React.createElement(DashBoard, Object.assign({}, routerProps, {\n        metricAreaInfo: this.state.metricAreaInfo,\n        metricAreaID: this.state.metricAreaID,\n        metricAreaOwner: this.state.metricAreaOwner,\n        metricAreaCalculations: this.state.metricAreaCalculations,\n        metricAreaCalculationsMonth: this.state.metricAreaCalculationsMonth,\n        metricAreaCalculationsQuarters: this.state.metricAreaCalculationsQuarters,\n        metricAreaCalculationsYears: this.state.metricAreaCalculationsYears,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }));\n    };\n\n    this.setMetricName = this.setMetricName.bind(this);\n    let metricMonths = new Map();\n    let metricQuarters = new Map();\n    let metricYears = new Map();\n    this.state = {\n      metrics: this.props.metrics,\n      // Data to be passed into metric calculations\n      // Represents metricAreaName\n      metricAreaInfo: null,\n      // Contains metric area name\n      metricAreaID: null,\n      // Contains metric area ID\n      metricAreaOwner: null,\n      // Contains metric area owner name\n      metricAreaCalculationsMonth: metricMonths,\n      // Represents calculations for a month\n      metricAreaCalculationsQuarters: metricQuarters,\n      // Represents calculations for quarters\n      metricAreaCalculationsYears: metricYears // Represents calculations for a year\n\n    };\n  } // // Render dashboard page and send it the necessary props\n\n\n  setMetricName(name, id) {\n    this.setState({\n      metricAreaInfo: name,\n      metricAreaID: id\n    });\n  }\n\n  render() {\n    return React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/Metrics/:metricID\",\n      render: this.renderMetricCalculations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, Array.from(this.props.metrics.entries()).map(key => {\n      // Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\n      return React.createElement(MetricAreaCard, {\n        metricName: key[0],\n        metricID: key[1],\n        metricNameFunc: this.setMetricName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      });\n    })));\n  }\n\n} // Represents a single metric button to render. A single metric card will contain the name of the metric\n// and acts as a link to the dashboard of the respective metric. \n\nclass MetricAreaCard extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (// When a link is clicked, retrieve the necessary information from firebase and then put it into metricAreaInfo\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: '/Metrics/' + this.props.metricName,\n        onClick: () => this.props.metricNameFunc(this.props.metricName, this.props.metricID),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, this.props.metricName))\n    );\n  }\n\n}","map":{"version":3,"sources":["C:/Users/nathan/go/src/insightful/insightful/src/Metrics.js"],"names":["React","Component","Switch","Route","Link","Button","ButtonGroup","ButtonToolbar","Card","CardImg","CardText","CardBody","CardTitle","CardDeck","CardGroup","firebase","DashBoard","Metrics","constructor","props","renderMetricCalculations","routerProps","rootPath","database","ref","once","snapshot","metricCalcInfo","val","databaseKeys","Object","keys","test","map","key","console","log","state","metricAreaID","metricAreaInfo","metricAreaOwner","metricAreaCalculations","metricAreaCalculationsMonth","metricAreaCalculationsQuarters","metricAreaCalculationsYears","setMetricName","bind","metricMonths","Map","metricQuarters","metricYears","metrics","name","id","setState","render","Array","from","entries","MetricAreaCard","metricName","metricNameFunc","metricID"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,QAAoC,kBAApC;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,aAA9B,QAAmD,YAAnD;AACA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,QAAxB,EAAkCC,QAAlC,EAA4CC,SAA5C,EAAuDC,QAAvD,EAAiEC,SAAjE,QAAkF,YAAlF;AACA,OAAO,mBAAP;AACA,OAAO,YAAP;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAO,MAAMC,OAAN,SAAsBhB,SAAtB,CAAgC;AAEnCiB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAuBnBC,wBAvBmB,GAuBSC,WAAD,IAAiB;AACxC,UAAIC,QAAQ,GAAGP,QAAQ,CAACQ,QAAT,GAAoBC,GAApB,CAAwB,oBAAxB,CAAf;AAEAF,MAAAA,QAAQ,CAACG,IAAT,CAAc,OAAd,EAAwBC,QAAD,IAAc;AACjC,YAAIC,cAAc,GAAGD,QAAQ,CAACE,GAAT,EAArB;AACA,YAAIC,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYJ,cAAZ,CAAnB,CAFiC,CAGjC;;AACA,YAAIK,IAAI,GAAGH,YAAY,CAACI,GAAb,CAAkBC,GAAD,IAAS;AACjCC,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,YAAvB,EADiC,CAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,SA1BU,CAAX;AA2BH,OA/BD;AAgCA,aAAO,oBAAC,SAAD,oBACKjB,WADL;AAEC,QAAA,cAAc,EAAE,KAAKgB,KAAL,CAAWE,cAF5B;AAGC,QAAA,YAAY,EAAE,KAAKF,KAAL,CAAWC,YAH1B;AAIC,QAAA,eAAe,EAAE,KAAKD,KAAL,CAAWG,eAJ7B;AAKC,QAAA,sBAAsB,EAAE,KAAKH,KAAL,CAAWI,sBALpC;AAMC,QAAA,2BAA2B,EAAE,KAAKJ,KAAL,CAAWK,2BANzC;AAOC,QAAA,8BAA8B,EAAE,KAAKL,KAAL,CAAWM,8BAP5C;AAQC,QAAA,2BAA2B,EAAE,KAAKN,KAAL,CAAWO,2BARzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AAUH,KApEkB;;AAGf,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,QAAIC,YAAY,GAAG,IAAIC,GAAJ,EAAnB;AACA,QAAIC,cAAc,GAAI,IAAID,GAAJ,EAAtB;AACA,QAAIE,WAAW,GAAG,IAAIF,GAAJ,EAAlB;AAEA,SAAKX,KAAL,GAAa;AACTc,MAAAA,OAAO,EAAE,KAAKhC,KAAL,CAAWgC,OADX;AAGT;AACA;AACAZ,MAAAA,cAAc,EAAE,IALP;AAKe;AACxBD,MAAAA,YAAY,EAAE,IANL;AAMe;AACxBE,MAAAA,eAAe,EAAE,IAPR;AAOe;AACxBE,MAAAA,2BAA2B,EAAEK,YARpB;AAQkC;AAC3CJ,MAAAA,8BAA8B,EAAEM,cATvB;AASuC;AAChDL,MAAAA,2BAA2B,EAAEM,WAVpB,CAUiC;;AAVjC,KAAb;AAYH,GAtBkC,CAwBnC;;;AAiDAL,EAAAA,aAAa,CAACO,IAAD,EAAOC,EAAP,EAAW;AACpB,SAAKC,QAAL,CAAc;AACVf,MAAAA,cAAc,EAAEa,IADN;AAEVd,MAAAA,YAAY,EAAEe;AAFJ,KAAd;AAIH;;AAEDE,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,oBAAZ;AAAiC,MAAA,MAAM,EAAE,KAAKnC,wBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQoC,KAAK,CAACC,IAAN,CAAW,KAAKtC,KAAL,CAAWgC,OAAX,CAAmBO,OAAnB,EAAX,EAAyCzB,GAAzC,CAA8CC,GAAD,IAAS;AAClD;AACA,aAAO,oBAAC,cAAD;AACH,QAAA,UAAU,EAAEA,GAAG,CAAC,CAAD,CADZ;AAEH,QAAA,QAAQ,EAAEA,GAAG,CAAC,CAAD,CAFV;AAGH,QAAA,cAAc,EAAE,KAAKW,aAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAKH,KAPD,CAFR,CAFJ,CADJ;AAiBH;;AAlGkC,C,CAqGvC;AACA;;AACA,MAAMc,cAAN,SAA6B1D,SAA7B,CAAuC;AACnCiB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AAEDoC,EAAAA,MAAM,GAAG;AACL,WACI;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAE,cAAc,KAAKpC,KAAL,CAAWyC,UAAnC;AAA+C,QAAA,OAAO,EAAE,MAAI,KAAKzC,KAAL,CAAW0C,cAAX,CAA0B,KAAK1C,KAAL,CAAWyC,UAArC,EAAiD,KAAKzC,KAAL,CAAW2C,QAA5D,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoI,KAAK3C,KAAL,CAAWyC,UAA/I,CADJ;AAFJ;AAMH;;AAZkC","sourcesContent":["import React, { Component } from 'react';\r\nimport { Switch, Route, Link } from 'react-router-dom';\r\nimport { Button, ButtonGroup, ButtonToolbar } from 'reactstrap';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\r\nimport './css/Metrics.css';\r\nimport './index.js';\r\nimport firebase from 'firebase/app';\r\nimport { DashBoard } from './DashBoard';\r\n\r\nexport class Metrics extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.setMetricName = this.setMetricName.bind(this);\r\n        let metricMonths = new Map()\r\n        let metricQuarters =  new Map()\r\n        let metricYears = new Map()\r\n\r\n        this.state = {\r\n            metrics: this.props.metrics,\r\n\r\n            // Data to be passed into metric calculations\r\n            // Represents metricAreaName\r\n            metricAreaInfo: null,   // Contains metric area name\r\n            metricAreaID: null,     // Contains metric area ID\r\n            metricAreaOwner: null,  // Contains metric area owner name\r\n            metricAreaCalculationsMonth: metricMonths, // Represents calculations for a month\r\n            metricAreaCalculationsQuarters: metricQuarters, // Represents calculations for quarters\r\n            metricAreaCalculationsYears: metricYears, // Represents calculations for a year\r\n        }\r\n    }\r\n\r\n    // // Render dashboard page and send it the necessary props\r\n    renderMetricCalculations = (routerProps) => {\r\n        let rootPath = firebase.database().ref('metricCalculations')\r\n\r\n        rootPath.once('value', (snapshot) => {\r\n            let metricCalcInfo = snapshot.val();\r\n            let databaseKeys = Object.keys(metricCalcInfo);\r\n            // Need to find every metricCalculation that has the same metricAreaID and put it in a map\r\n            let test = databaseKeys.map((key) => {\r\n                console.log(this.state.metricAreaID)\r\n                // console.log(metricCalcInfo[key])\r\n                // let calcPath = firebase.database().ref('metricCalculations').child(key).child('metricAreaID')\r\n                // calcPath.once('value', (snapshotTwo) => {\r\n                //     let valTest = snapshotTwo.val()\r\n                //     console.log(valTest)\r\n                //     let databaseKeys2 = Object.keys(valTest)\r\n                //     console.log(databaseKeys2)\r\n                //     // console.log(valTest)\r\n                //     // if (valTest = this.state.metricID) {\r\n                //     //     console.log(\"IDs match.\")\r\n                //     //     console.log(valTest)\r\n                //     //     console.log(this.state.metricID)\r\n                //     // } else {\r\n                //     //     console.log(\"IDs do not match.\")\r\n                //     // }\r\n                //     databaseKeys2.map((key2) => {\r\n                //         console.log(key2)\r\n                //     })\r\n                // })\r\n                // if (metricAreaID = this.state.metricAreaID) {\r\n                //     console.log('ID is the same')\r\n                // } else {\r\n                //     console.log('ID is not the same')\r\n                // }\r\n            })\r\n        });\r\n        return <DashBoard\r\n                {...routerProps}\r\n                metricAreaInfo={this.state.metricAreaInfo}\r\n                metricAreaID={this.state.metricAreaID}\r\n                metricAreaOwner={this.state.metricAreaOwner}\r\n                metricAreaCalculations={this.state.metricAreaCalculations}\r\n                metricAreaCalculationsMonth={this.state.metricAreaCalculationsMonth}\r\n                metricAreaCalculationsQuarters={this.state.metricAreaCalculationsQuarters}\r\n                metricAreaCalculationsYears={this.state.metricAreaCalculationsYears}\r\n                />\r\n    }\r\n\r\n\r\n    setMetricName(name, id) {\r\n        this.setState({ \r\n            metricAreaInfo: name,\r\n            metricAreaID: id\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Switch>\r\n                <Route path=\"/Metrics/:metricID\" render={this.renderMetricCalculations} />\r\n                <div>\r\n                    {\r\n                        Array.from(this.props.metrics.entries()).map((key) => {\r\n                            // Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\r\n                            return <MetricAreaCard\r\n                                metricName={key[0]}\r\n                                metricID={key[1]}\r\n                                metricNameFunc={this.setMetricName}\r\n                            />\r\n                        })\r\n                    }\r\n                </div>\r\n             </Switch> \r\n        )\r\n    }\r\n}\r\n\r\n// Represents a single metric button to render. A single metric card will contain the name of the metric\r\n// and acts as a link to the dashboard of the respective metric. \r\nclass MetricAreaCard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // When a link is clicked, retrieve the necessary information from firebase and then put it into metricAreaInfo\r\n            <div>\r\n                <Link to={'/Metrics/' + this.props.metricName} onClick={()=>this.props.metricNameFunc(this.props.metricName, this.props.metricID)}>{this.props.metricName}</Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}