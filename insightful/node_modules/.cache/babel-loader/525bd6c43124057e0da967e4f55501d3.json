{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\insightful\\\\insightful\\\\src\\\\DashBoard.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport { Table, Button, ButtonGroup, ButtonToolbar } from 'reactstrap';\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\nimport './index.js';\nimport './css/DashBoard.css';\nimport firebase from 'firebase/app';\nexport class DashBoard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renderMetricMonthly = () => {\n      let rootPath = firebase.database().ref('metricGoalsMonths');\n      let monthMap = new Map();\n      rootPath.once('value', snapshot => {\n        let info = snapshot.val();\n        let keys = Object.keys(info);\n        keys.map(key => {\n          let intKey = parseInt(key, 10); // If the our prop of metric calculation IDs contains the ID, add it to the month map.\n\n          if (this.props.metricAreaCalculationIDs.includes(intKey)) {\n            monthMap.set(key, info[key]);\n          }\n        });\n        this.arrayMonthCalculations(monthMap);\n      });\n    };\n\n    this.renderMetricQuarterly = () => {\n      let rootPath = firebase.database().ref('metricGoalsQuarters');\n      let quarterMap = new Map();\n      rootPath.once('value', snapshot => {\n        let info = snapshot.val();\n        let keys = Object.keys(info);\n        keys.map(key => {\n          let intKey = parseInt(key, 10);\n\n          if (this.props.metricAreaCalculationsIDs.includes(intKey)) {\n            quarterMap.set(key, info[key]);\n          }\n        });\n        this.arrayQuarterCalculations(quarterMap);\n      });\n    };\n\n    this.state = {\n      metricAreaCalculationsMonth: [],\n      metricAreaCalculationsQuarter: [],\n      metricAreaCalculationsAnnual: [],\n      currentCalculation: 0 // Will always default to the first value in an array\n\n    };\n  } // Do any information retrieval here\n\n\n  componentDidMount() {\n    // Retrieve monthly information for a metric calculation\n    this.renderMetricMonthly();\n    this.renderMetricQuarterly();\n  }\n\n  arrayMonthCalculations(map) {\n    this.setState(state => {\n      let monthArray = Array.from(map.entries()).map(key => {\n        return key;\n      });\n      state.metricAreaCalculationsMonth = monthArray;\n      return state;\n    });\n  }\n\n  render() {\n    let metricElements = Array.from(this.props.metricAreaCalculations.entries()).map(key => {\n      //Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\n      return React.createElement(MetricCalculationRow, {\n        metrics: key[1].metric,\n        metricCalc: key[1].metricCalculation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      });\n    }); // let metricMonthlies = Array.from(this.state.metricAreaCalculationsMonth.entries()).map((key) => {\n    //     console.log(key)\n    //     return <MetricMonthly/>\n    // })\n\n    return React.createElement(\"div\", {\n      className: \"body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \" \", this.props.metricAreaInfo, \" \"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \" \", this.props.metricAreaID, \" \"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \" Metric Area Summary \"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \" Owner: \", this.props.metricAreaOwner, \" \"), React.createElement(Table, {\n      bordered: true,\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \" Metric \"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \" Metric Calculations \"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, metricElements)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(MetricQuarterly, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(MetricAnnuals, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    })));\n  }\n\n} // Represents a single row in the metric/metric calculations table\n// Contains all metric name and metric calculation names for a metric area\n\nclass MetricCalculationRow extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, this.props.metrics), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, this.props.metricCalc));\n  }\n\n}\n\nclass MetricMonthly extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    console.log(\"Component mounted!\");\n    console.log(); // console.log(this.props.)\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }) // <div>\n    //     <h1>{this.props.metricCalcIDs}</h1>\n    //     <h2>{this.props.quarter}</h2>\n    //     <Table responsive>\n    //         <tbody>\n    //             <tr>\n    //                 <th>Actual</th>\n    //                 <th>Target</th>\n    //             </tr>\n    //             <tr>\n    //                 <th>{this.props.actual}</th>\n    //                 <th>{this.props.target}</th>\n    //             </tr>\n    //         </tbody>\n    //     </Table>\n    // </div>\n    ;\n  }\n\n} // // Represents a single month metric component\n// class MetricMonthRow extends Component {\n//     constructor(props) {\n//         super(props);\n//     }\n// }\n\n\nclass MetricQuarterly extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(Table, {\n      responsive: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, \"Actual\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"Target\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, this.props.actual), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, this.props.target)))));\n  }\n\n}\n\nclass MetricAnnuals extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, \"Actual\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"Target\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"Highlights\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"Lowlights\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \"Correction of Error\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, this.props.actual), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, this.props.target), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, this.props.highlight), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, this.props.lowlight), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, this.props.correction)))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/nathan/go/src/insightful/insightful/src/DashBoard.js"],"names":["React","Component","BrowserRouter","Router","Route","Link","Table","Button","ButtonGroup","ButtonToolbar","Card","CardImg","CardText","CardBody","CardTitle","CardDeck","CardGroup","firebase","DashBoard","constructor","props","renderMetricMonthly","rootPath","database","ref","monthMap","Map","once","snapshot","info","val","keys","Object","map","key","intKey","parseInt","metricAreaCalculationIDs","includes","set","arrayMonthCalculations","renderMetricQuarterly","quarterMap","metricAreaCalculationsIDs","arrayQuarterCalculations","state","metricAreaCalculationsMonth","metricAreaCalculationsQuarter","metricAreaCalculationsAnnual","currentCalculation","componentDidMount","setState","monthArray","Array","from","entries","render","metricElements","metricAreaCalculations","metric","metricCalculation","metricAreaInfo","metricAreaID","metricAreaOwner","MetricCalculationRow","metrics","metricCalc","MetricMonthly","console","log","MetricQuarterly","actual","target","MetricAnnuals","highlight","lowlight","correction"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link} from 'react-router-dom';\r\nimport { Table, Button, ButtonGroup, ButtonToolbar} from 'reactstrap';\r\nimport {Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\r\n\r\nimport './index.js';\r\nimport './css/DashBoard.css';\r\n\r\nimport firebase from 'firebase/app';\r\n\r\nexport class DashBoard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            metricAreaCalculationsMonth: [],\r\n            metricAreaCalculationsQuarter: [],\r\n            metricAreaCalculationsAnnual: [],\r\n            currentCalculation: 0 // Will always default to the first value in an array\r\n        }\r\n    }\r\n\r\n    // Do any information retrieval here\r\n    componentDidMount() {\r\n        // Retrieve monthly information for a metric calculation\r\n        this.renderMetricMonthly()\r\n        this.renderMetricQuarterly()    \r\n    }\r\n\r\n    arrayMonthCalculations(map) {\r\n        this.setState((state) => {\r\n            let monthArray = Array.from(map.entries()).map((key) => {\r\n                return key\r\n            })\r\n            state.metricAreaCalculationsMonth = monthArray\r\n            return state\r\n        })\r\n    }\r\n\r\n    renderMetricMonthly = () => {\r\n        let rootPath = firebase.database().ref('metricGoalsMonths')\r\n        let monthMap = new Map()\r\n\r\n        rootPath.once('value', (snapshot) => {\r\n            let info = snapshot.val();\r\n            let keys = Object.keys(info);\r\n            keys.map((key) => {\r\n                let intKey = parseInt(key, 10)\r\n                // If the our prop of metric calculation IDs contains the ID, add it to the month map.\r\n                if (this.props.metricAreaCalculationIDs.includes(intKey)) {\r\n                    monthMap.set(key, info[key])\r\n                }\r\n            })\r\n            this.arrayMonthCalculations(monthMap)\r\n        })\r\n    }\r\n\r\n    renderMetricQuarterly = () => {\r\n        let rootPath = firebase.database().ref('metricGoalsQuarters')\r\n        let quarterMap = new Map()\r\n\r\n        rootPath.once('value', (snapshot) => {\r\n            let info = snapshot.val();\r\n            let keys = Object.keys(info);\r\n            keys.map((key) => {\r\n                let intKey = parseInt(key, 10)\r\n                if (this.props.metricAreaCalculationsIDs.includes(intKey)) {\r\n                    quarterMap.set(key, info[key])\r\n                }\r\n            })\r\n            this.arrayQuarterCalculations(quarterMap)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let metricElements = Array.from(this.props.metricAreaCalculations.entries()).map((key) => {\r\n            //Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\r\n            return <MetricCalculationRow\r\n                    metrics={key[1].metric}\r\n                    metricCalc={key[1].metricCalculation}\r\n                    />\r\n        })\r\n\r\n        // let metricMonthlies = Array.from(this.state.metricAreaCalculationsMonth.entries()).map((key) => {\r\n        //     console.log(key)\r\n        //     return <MetricMonthly/>\r\n        // })\r\n    \r\n        return(        \r\n            <div className = \"body\">\r\n            <h1> {this.props.metricAreaInfo} </h1>\r\n            <h1> {this.props.metricAreaID} </h1>\r\n            <h2> Metric Area Summary </h2>\r\n            <h3> Owner: {this.props.metricAreaOwner} </h3>\r\n\r\n            <Table bordered align=\"center\">\r\n                <thead>\r\n                    <tr>\r\n                    <th> Metric </th>\r\n                    <th> Metric Calculations </th>\r\n\r\n                    </tr>\r\n                </thead>\r\n\r\n\r\n                {/* Table representing metric and metric caluclation */}\r\n                <tbody>\r\n                    {metricElements}\r\n                </tbody>\r\n            </Table>\r\n\r\n            {/* Container for current  */}\r\n            <div>\r\n                {/* Monthly Information */}\r\n                {/* {metricMonthlies} */}\r\n\r\n                {/* Quarterly Information */}\r\n                {\r\n                <MetricQuarterly>\r\n\r\n                </MetricQuarterly>\r\n                }\r\n                {/* Yearly Information */}\r\n                {\r\n                <MetricAnnuals>\r\n\r\n                </MetricAnnuals>\r\n                }\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n// Represents a single row in the metric/metric calculations table\r\n// Contains all metric name and metric calculation names for a metric area\r\nclass MetricCalculationRow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <th>\r\n                    {this.props.metrics}\r\n                </th>\r\n                <th>\r\n                    {this.props.metricCalc}\r\n                </th>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nclass MetricMonthly extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"Component mounted!\")\r\n        console.log()\r\n        // console.log(this.props.)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n            // <div>\r\n            //     <h1>{this.props.metricCalcIDs}</h1>\r\n            //     <h2>{this.props.quarter}</h2>\r\n            //     <Table responsive>\r\n            //         <tbody>\r\n            //             <tr>\r\n            //                 <th>Actual</th>\r\n            //                 <th>Target</th>\r\n            //             </tr>\r\n            //             <tr>\r\n            //                 <th>{this.props.actual}</th>\r\n            //                 <th>{this.props.target}</th>\r\n            //             </tr>\r\n            //         </tbody>\r\n            //     </Table>\r\n            // </div>\r\n        )\r\n    }\r\n}\r\n\r\n// // Represents a single month metric component\r\n// class MetricMonthRow extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//     }\r\n// }\r\n\r\nclass MetricQuarterly extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Table responsive>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Actual</th>\r\n                            <th>Target</th>\r\n                            {/* <th>Highlights</th>\r\n                            <th>Lowlights</th>\r\n                            <th>Correction of Error</th> */}\r\n                        </tr>\r\n                        <tr>\r\n                            <th>{this.props.actual}</th>\r\n                            <th>{this.props.target}</th>\r\n                            {/* <th>{this.props.highlight}</th>\r\n                            <th>{this.props.lowlight}</th>\r\n                            <th>{this.props.correction}</th> */}\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass MetricAnnuals extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Actual</th>\r\n                            <th>Target</th>\r\n                            <th>Highlights</th>\r\n                            <th>Lowlights</th>\r\n                            <th>Correction of Error</th>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>{this.props.actual}</th>\r\n                            <th>{this.props.target}</th>\r\n                            <th>{this.props.highlight}</th>\r\n                            <th>{this.props.lowlight}</th>\r\n                            <th>{this.props.correction}</th>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}