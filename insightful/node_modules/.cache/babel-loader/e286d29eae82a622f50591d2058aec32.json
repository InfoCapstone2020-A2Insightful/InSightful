{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\Insightful\\\\insightful\\\\src\\\\Metrics.js\";\nimport React, { Component } from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport { Button, ButtonGroup, ButtonToolbar } from 'reactstrap';\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\nimport './css/Metrics.css';\nimport './index.js';\nimport { DashBoard } from './DashBoard';\nexport class Metrics extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      metrics: this.props.metrics\n    };\n  }\n\n  render() {\n    console.log(this.props.metrics);\n    return (// Eventually need to pass in metric values as props from app.js...\n      React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(Route, {\n        path: \"/Metrics/:metricID\",\n        render: props => React.createElement(DashBoard, Object.assign({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, this.props.metrics.map(item => {\n        return React.createElement(MetricAreaCard, {\n          metricName: item,\n          metricID: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        });\n      })))\n    );\n  }\n\n} // export class MetricCardList extends Component {\n//     render() {\n//         let i = 0;\n//         return (\n//             <div className=\"card-columns\">\n//             </div>\n//         );\n//     }\n// }\n// Represents a single metric button to render. A single metric card will contain the name of the metric\n// and acts as a link to the dashboard of the respective metric. \n\nclass MetricAreaCard extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: '/Metrics/' + this.props.metricID,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, this.props.metricName));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/nathan/go/src/Insightful/insightful/src/Metrics.js"],"names":["React","Component","Switch","Route","Link","Button","ButtonGroup","ButtonToolbar","Card","CardImg","CardText","CardBody","CardTitle","CardDeck","CardGroup","DashBoard","Metrics","constructor","props","state","metrics","render","console","log","map","item","MetricAreaCard","metricID","metricName"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,QAAmC,kBAAnC;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,aAA9B,QAAkD,YAAlD;AACA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,QAAxB,EAAkCC,QAAlC,EAA4CC,SAA5C,EAAuDC,QAAvD,EAAiEC,SAAjE,QAAkF,YAAlF;AACA,OAAO,mBAAP;AACA,OAAO,YAAP;AAEA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAO,MAAMC,OAAN,SAAsBf,SAAtB,CAAgC;AAEnCgB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,KAAKF,KAAL,CAAWE;AADX,KAAb;AAGH;;AAEDC,EAAAA,MAAM,GAAG;AAELC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAL,CAAWE,OAAvB;AACA,WAEI;AACA,0BAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,oBAAZ;AAAiC,QAAA,MAAM,EAAGF,KAAD,IAAW,oBAAC,SAAD,oBAAeA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAeQ,KAAKA,KAAL,CAAWE,OAAX,CAAmBI,GAAnB,CAAwBC,IAAD,IAAU;AAC7B,eAAO,oBAAC,cAAD;AACC,UAAA,UAAU,EAAEA,IADb;AAEC,UAAA,QAAQ,EAAEA,IAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAIH,OALD,CAfR,CAFJ;AAHJ;AA8BH;;AA1CkC,C,CA6CvC;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AACA,MAAMC,cAAN,SAA6BzB,SAA7B,CAAuC;AAEnCgB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AAEDG,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAE,cAAc,KAAKH,KAAL,CAAWS,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8C,KAAKT,KAAL,CAAWU,UAAzD,CADJ,CADJ;AAKH;;AAZkC","sourcesContent":["import React, { Component } from 'react';\r\nimport { Switch, Route, Link} from 'react-router-dom';\r\nimport { Button, ButtonGroup, ButtonToolbar} from 'reactstrap';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\r\nimport './css/Metrics.css';\r\nimport './index.js';\r\n\r\nimport { DashBoard } from './DashBoard';\r\n\r\nexport class Metrics extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            metrics: this.props.metrics\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        console.log(this.props.metrics)\r\n        return(\r\n            \r\n            // Eventually need to pass in metric values as props from app.js...\r\n            <Switch>\r\n                <Route path=\"/Metrics/:metricID\" render={(props) => <DashBoard {...props} /> } />\r\n                <div>\r\n                    {/* <MetricAreaCard metricName=\"CDS\" metricID=\"CDS\"/>\r\n                    <MetricAreaCard metricName=\"Clinical Training\" metricID=\"Clinical Training\"/>\r\n                    <MetricAreaCard metricName=\"EB Training\" metricID=\"EB Training\"/>\r\n                    <MetricAreaCard metricName=\"Eye Bank Partners\" metricID=\"Eye Bank Partners\"/>\r\n                    <MetricAreaCard metricName=\"Finance\" metricID=\"Finance\"/>\r\n                    <MetricAreaCard metricName=\"Global Donor Operations\" metricID=\"Global Donor Operations\"/>\r\n                    <MetricAreaCard metricName=\"Human Resources\" metricID=\"Human Resources\"/>\r\n                    <MetricAreaCard metricName=\"MA\" metricID=\"MA\"/>\r\n                    <MetricAreaCard metricName=\"Policy & Advocacy\" metricID=\"Policy & Advocacy\"/>\r\n                    <MetricAreaCard metricName=\"Prevention\" metricID=\"Prevention\"/>\r\n                    <MetricAreaCard metricName=\"Quality\" metricID=\"Quality\"/>\r\n                    <MetricAreaCard metricName=\"Training\" metricID=\"Training\"/>\r\n                    <MetricAreaCard metricName=\"Interventions\" metricID=\"Interventions\"/> */}\r\n                    {\r\n                        this.props.metrics.map((item) => {\r\n                            return <MetricAreaCard \r\n                                    metricName={item}\r\n                                    metricID={item}\r\n                                    />\r\n                        })\r\n                    }\r\n                </div>\r\n            </Switch>\r\n        )\r\n    }\r\n}\r\n\r\n// export class MetricCardList extends Component {\r\n//     render() {\r\n//         let i = 0;\r\n//         return (\r\n//             <div className=\"card-columns\">\r\n\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// Represents a single metric button to render. A single metric card will contain the name of the metric\r\n// and acts as a link to the dashboard of the respective metric. \r\nclass MetricAreaCard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Link to={'/Metrics/' + this.props.metricID}>{this.props.metricName}</Link>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}