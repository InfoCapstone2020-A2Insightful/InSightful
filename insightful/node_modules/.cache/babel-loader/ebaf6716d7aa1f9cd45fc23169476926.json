{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\insightful\\\\insightful\\\\src\\\\DashBoard.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport { Table, Button } from 'reactstrap';\nimport { MetricCalculationRow } from './test';\nimport './index.js';\nimport './css/DashBoard.css';\nimport firebase from 'firebase/app';\nexport class DashBoard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renderMetricMonthly = () => {\n      let rootPath = firebase.database().ref('metricGoalsMonths');\n      let monthMap = new Map();\n      rootPath.once('value', snapshot => {\n        let info = snapshot.val();\n        let keys = Object.keys(info);\n        keys.map(key => {\n          let intKey = parseInt(key, 10); // If the our prop of metric calculation IDs contains the ID, add it to the month map.\n\n          if (this.props.metricAreaCalculationIDs.includes(intKey)) {\n            monthMap.set(key, info[key]);\n          }\n        });\n        this.arrayMonthCalculations(monthMap);\n      });\n    };\n\n    this.renderMetricQuarterly = () => {\n      let rootPath = firebase.database().ref('metricGoalsQuarters');\n      let quarterMap = new Map();\n      rootPath.once('value', snapshot => {\n        let info = snapshot.val();\n        let keys = Object.keys(info);\n        keys.map(key => {\n          let intKey = parseInt(key, 10);\n\n          if (this.props.metricAreaCalculationIDs.includes(intKey)) {\n            quarterMap.set(key, info[key]);\n          }\n        });\n        this.arrayQuarterCalculations(quarterMap);\n      });\n    };\n\n    this.renderMetricAnnually = () => {\n      let rootPath = firebase.database().ref('metricGoalsAnnuals');\n      let annualMap = new Map();\n      rootPath.once('value', snapshot => {\n        let info = snapshot.val();\n        let keys = Object.keys(info);\n        keys.map(key => {\n          let intKey = parseInt(key, 10);\n\n          if (this.props.metricAreaCalculationIDs.includes(intKey)) {\n            annualMap.set(key, info[key]);\n          }\n        });\n        this.arrayAnnualCalculations(annualMap);\n      });\n    };\n\n    this.state = {\n      // Calculations should have the same array lengths...\n      // Work on centralizing the data so we aren't hoping\n      // everything is operating on the same index of the array\n      metricAreaCalculationsMonth: [],\n      metricAreaCalculationsQuarter: [],\n      metricAreaCalculationsAnnual: [],\n      currentCalculation: 0 // Will always default to the first value in an array\n\n    };\n  } // Do any information retrieval here\n\n\n  componentDidMount() {\n    // Retrieve monthly information for a metric calculation\n    this.renderMetricMonthly();\n    this.renderMetricQuarterly();\n    this.renderMetricAnnually();\n  } // Convert map to an array in the state\n\n\n  arrayMonthCalculations(map) {\n    this.setState(state => {\n      let monthArray = Array.from(map.entries()).map(key => {\n        return key;\n      });\n      state.metricAreaCalculationsMonth = monthArray;\n      return state;\n    });\n  } // Convert a map to an array in the state\n\n\n  arrayQuarterCalculations(map) {\n    this.setState(state => {\n      let quarterArray = Array.from(map.entries()).map(key => {\n        return key;\n      });\n      state.metricAreaCalculationsQuarter = quarterArray;\n      return state;\n    });\n  } // Convert a map to an array in the state\n\n\n  arrayAnnualCalculations(map) {\n    this.setState(state => {\n      let yearArray = Array.from(map.entries()).map(key => {\n        return key;\n      });\n      state.metricAreaCalculationsAnnual = yearArray;\n      return state;\n    });\n  } // Retrieve data for monthly calculations\n\n\n  leftButtonClick() {// let checkIfNullOrUnDef = this.state.metricAreaCalculationsQuarter.length\n    // console.log(checkIfNullOrUnDef)\n    // // if (checkIfNullOrUnDef) {\n    // //     console.log(this.state.metricAreaCalculationsMonth.length)\n    // // }\n  }\n\n  rightButtonClick() {// let checkIfNullOrUnDef = this.state.metricAreaCalculationsQuarter\n    // if (checkIfNullOrUnDef) {\n    //     console.log(this.state.metricAreaCalculationsMonth.length)\n    // }\n  }\n\n  arrayElements() {\n    const test = Array.from(this.props.metricAreaCalculations.entries()).map(key => {\n      //Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\n      return React.createElement(MetricCalculationRow, {\n        metrics: key[1].metric,\n        metricCalc: key[1].metricCalculation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      });\n    });\n    return test;\n  }\n\n  monthArrayElements(numValue) {\n    // Metrics for monthly information\n    let currentMonthCalc = this.state.metricAreaCalculationsMonth;\n    let calculationInfo = currentMonthCalc[numValue];\n    let monthArrayInfo = []; // Render if not undefined/null for month information\n\n    if (calculationInfo) {\n      let calculationKeys = calculationInfo[1];\n      let keys = Object.keys(calculationKeys);\n      monthArrayInfo = keys.map(key => {\n        let monthInfo = calculationKeys[key];\n        return React.createElement(MetricMonthly, {\n          actual: monthInfo.actual,\n          target: monthInfo.target,\n          month: monthInfo.month,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        });\n      });\n    }\n\n    return monthArrayInfo;\n  }\n\n  quarterArrayElements(numValue) {\n    // Metrics for quarterly information\n    let currentQuarterCalc = this.state.metricAreaCalculationsQuarter;\n    let calculationInfoQuarter = currentQuarterCalc[numValue];\n    let quarterArrayInfo = [];\n\n    if (calculationInfoQuarter) {\n      let calculationKeys = calculationInfoQuarter[1];\n      let keys = Object.keys(calculationKeys);\n      quarterArrayInfo = keys.map(key => {\n        let quarterInfo = calculationKeys[key];\n        return React.createElement(MetricQuarterly, {\n          actual: quarterInfo.actual,\n          target: quarterInfo.target,\n          quarter: quarterInfo.quarter,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        });\n      });\n    }\n\n    return quarterArrayInfo;\n  }\n\n  annualArrayElements(numValue) {\n    // Metrics for annual information\n    let currentAnnualCalc = this.state.metricAreaCalculationsAnnual;\n    let calculationInfoAnnual = currentAnnualCalc[numValue];\n    let annualArrayInfo = [];\n\n    if (calculationInfoAnnual) {\n      let calculationKeys = calculationInfoAnnual[1];\n      let keys = Object.keys(calculationKeys);\n      annualArrayInfo = keys.map(key => {\n        let annualInfo = calculationKeys[key];\n        return React.createElement(MetricAnnuals, {\n          actual: annualInfo.actual,\n          target: annualInfo.target,\n          annual: annualInfo.quarter,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204\n          },\n          __self: this\n        });\n      });\n    }\n\n    return annualArrayInfo;\n  }\n\n  render() {\n    const metricElements = this.arrayElements();\n    let leftButtonString = \"<\";\n    let rightButtonString = \">\";\n    let currentNumCalc = this.state.currentCalculation;\n    let monthElements = this.monthArrayElements(currentNumCalc);\n    let quarterElements = this.quarterArrayElements(currentNumCalc);\n    let annualElements = this.annualArrayElements(currentNumCalc);\n    return React.createElement(\"div\", {\n      className: \"body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \" \", this.props.metricAreaInfo, \" \"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \" \", this.props.metricAreaID, \" \"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \" Metric Area Summary \"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \" Owner: \", this.props.metricAreaOwner, \" \"), React.createElement(Table, {\n      bordered: true,\n      align: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, \" Metric \"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, \" Metric Calculations \"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, metricElements)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.leftButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, leftButtonString), React.createElement(Button, {\n      onClick: this.rightButtonClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, rightButtonString)), monthElements, quarterElements, annualElements));\n  }\n\n} // // Represents a single row in the metric/metric calculations table\n// // Contains all metric name and metric calculation names for a metric area\n// class MetricCalculationRow extends Component {\n//     constructor(props) {\n//         super(props);\n//     }\n//     render() {\n//         return (\n//             <tr>\n//                 <th>\n//                     {this.props.metrics}\n//                 </th>\n//                 <th>\n//                     {this.props.metricCalc}\n//                 </th>\n//             </tr>\n//         )\n//     }\n// }\n\nclass MetricMonthly extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {}\n\n  month(num) {\n    switch (num) {\n      case 1:\n        return \"January\";\n\n      case 2:\n        return \"February\";\n\n      case 3:\n        return \"March\";\n\n      case 4:\n        return \"April\";\n\n      case 5:\n        return \"May\";\n\n      case 6:\n        return \"June\";\n\n      case 7:\n        return \"July\";\n\n      case 8:\n        return \"August\";\n\n      case 9:\n        return \"September\";\n\n      case 10:\n        return \"October\";\n\n      case 11:\n        return \"November\";\n\n      case 12:\n        return \"December\";\n    }\n  }\n\n  render() {\n    let actualValue = this.props.actual;\n    let monthValue = this.month(this.props.month); // If there is no value existing for the actual yet\n\n    if (!actualValue) {\n      actualValue = \"N/A\";\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, monthValue), React.createElement(Table, {\n      responsive: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, \"Actual\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, \"Target\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, actualValue), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, this.props.target)))));\n  }\n\n}\n\nclass MetricQuarterly extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    let actualValue = this.props.actual;\n    let quarterValue = \"Q\" + this.props.quarter; // If there is no value existing for the actual yet\n\n    if (!actualValue) {\n      actualValue = \"N/A\";\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, quarterValue), React.createElement(Table, {\n      responsive: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }, \"Actual\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, \"Target\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, actualValue), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, this.props.target)))));\n  }\n\n}\n\nclass MetricAnnuals extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, \"Annual\"), React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, \"Actual\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, \"Target\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, \"Highlights\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, \"Lowlights\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, \"Correction of Error\")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, this.props.actual), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, this.props.target), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, this.props.highlight), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, this.props.lowlight), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, this.props.correction)))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/nathan/go/src/insightful/insightful/src/DashBoard.js"],"names":["React","Component","BrowserRouter","Router","Route","Link","Table","Button","MetricCalculationRow","firebase","DashBoard","constructor","props","renderMetricMonthly","rootPath","database","ref","monthMap","Map","once","snapshot","info","val","keys","Object","map","key","intKey","parseInt","metricAreaCalculationIDs","includes","set","arrayMonthCalculations","renderMetricQuarterly","quarterMap","arrayQuarterCalculations","renderMetricAnnually","annualMap","arrayAnnualCalculations","state","metricAreaCalculationsMonth","metricAreaCalculationsQuarter","metricAreaCalculationsAnnual","currentCalculation","componentDidMount","setState","monthArray","Array","from","entries","quarterArray","yearArray","leftButtonClick","rightButtonClick","arrayElements","test","metricAreaCalculations","metric","metricCalculation","monthArrayElements","numValue","currentMonthCalc","calculationInfo","monthArrayInfo","calculationKeys","monthInfo","actual","target","month","quarterArrayElements","currentQuarterCalc","calculationInfoQuarter","quarterArrayInfo","quarterInfo","quarter","annualArrayElements","currentAnnualCalc","calculationInfoAnnual","annualArrayInfo","annualInfo","render","metricElements","leftButtonString","rightButtonString","currentNumCalc","monthElements","quarterElements","annualElements","metricAreaInfo","metricAreaID","metricAreaOwner","MetricMonthly","num","actualValue","monthValue","MetricQuarterly","quarterValue","MetricAnnuals","highlight","lowlight","correction"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link} from 'react-router-dom';\r\nimport { Table, Button} from 'reactstrap';\r\nimport {MetricCalculationRow} from './test';\r\n\r\n\r\nimport './index.js';\r\nimport './css/DashBoard.css';\r\n\r\nimport firebase from 'firebase/app';\r\n\r\nexport class DashBoard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            // Calculations should have the same array lengths...\r\n            // Work on centralizing the data so we aren't hoping\r\n            // everything is operating on the same index of the array\r\n            metricAreaCalculationsMonth: [],\r\n            metricAreaCalculationsQuarter: [],\r\n            metricAreaCalculationsAnnual: [],\r\n            currentCalculation: 0 // Will always default to the first value in an array\r\n        }\r\n    }\r\n\r\n    // Do any information retrieval here\r\n    componentDidMount() {\r\n        // Retrieve monthly information for a metric calculation\r\n        this.renderMetricMonthly()\r\n        this.renderMetricQuarterly()  \r\n        this.renderMetricAnnually()  \r\n    }\r\n\r\n    // Convert map to an array in the state\r\n    arrayMonthCalculations(map) {\r\n        this.setState((state) => {\r\n            let monthArray = Array.from(map.entries()).map((key) => {\r\n                return key\r\n            })\r\n            state.metricAreaCalculationsMonth = monthArray\r\n            return state\r\n        })\r\n    }\r\n    \r\n    // Convert a map to an array in the state\r\n    arrayQuarterCalculations(map) {\r\n        this.setState((state) => {\r\n            let quarterArray = Array.from(map.entries()).map((key) => {\r\n                return key\r\n            })\r\n            state.metricAreaCalculationsQuarter = quarterArray\r\n            return state\r\n        })\r\n    }\r\n\r\n    // Convert a map to an array in the state\r\n    arrayAnnualCalculations(map) {\r\n        this.setState((state) => {\r\n            let yearArray = Array.from(map.entries()).map((key) => {\r\n                return key\r\n            })\r\n            state.metricAreaCalculationsAnnual = yearArray\r\n            return state\r\n        })\r\n    }\r\n\r\n    // Retrieve data for monthly calculations\r\n    renderMetricMonthly = () => {\r\n        let rootPath = firebase.database().ref('metricGoalsMonths')\r\n        let monthMap = new Map()\r\n\r\n        rootPath.once('value', (snapshot) => {\r\n            let info = snapshot.val();\r\n            let keys = Object.keys(info);\r\n            keys.map((key) => {\r\n                let intKey = parseInt(key, 10)\r\n                // If the our prop of metric calculation IDs contains the ID, add it to the month map.\r\n                if (this.props.metricAreaCalculationIDs.includes(intKey)) {\r\n                    monthMap.set(key, info[key])\r\n                }\r\n            })\r\n            this.arrayMonthCalculations(monthMap)\r\n        })\r\n    }\r\n\r\n    // Retrieve data for quarterly calculations\r\n    renderMetricQuarterly = () => {\r\n        let rootPath = firebase.database().ref('metricGoalsQuarters')\r\n        let quarterMap = new Map()\r\n\r\n        rootPath.once('value', (snapshot) => {\r\n            let info = snapshot.val();\r\n            let keys = Object.keys(info);\r\n            keys.map((key) => {\r\n                let intKey = parseInt(key, 10)\r\n                if (this.props.metricAreaCalculationIDs.includes(intKey)) {\r\n                    quarterMap.set(key, info[key])\r\n                }\r\n            })\r\n            this.arrayQuarterCalculations(quarterMap)\r\n        })\r\n    }\r\n\r\n    // Retrieve data for annually calculations\r\n    renderMetricAnnually = () => {\r\n        let rootPath = firebase.database().ref('metricGoalsAnnuals')\r\n        let annualMap = new Map()\r\n\r\n        rootPath.once('value', (snapshot) => {\r\n            let info = snapshot.val();\r\n            let keys = Object.keys(info);\r\n            keys.map((key) => {\r\n                let intKey = parseInt(key, 10)\r\n                if (this.props.metricAreaCalculationIDs.includes(intKey)) {\r\n                    annualMap.set(key, info[key])\r\n                }\r\n            })\r\n            this.arrayAnnualCalculations(annualMap)\r\n        })\r\n    }\r\n\r\n    leftButtonClick() {\r\n        // let checkIfNullOrUnDef = this.state.metricAreaCalculationsQuarter.length\r\n        // console.log(checkIfNullOrUnDef)\r\n        // // if (checkIfNullOrUnDef) {\r\n        // //     console.log(this.state.metricAreaCalculationsMonth.length)\r\n        // // }\r\n    }\r\n\r\n    rightButtonClick() {\r\n        // let checkIfNullOrUnDef = this.state.metricAreaCalculationsQuarter\r\n        // if (checkIfNullOrUnDef) {\r\n        //     console.log(this.state.metricAreaCalculationsMonth.length)\r\n        // }\r\n    }\r\n\r\n    arrayElements() {\r\n        const test = Array.from(this.props.metricAreaCalculations.entries()).map((key) => {\r\n            //Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\r\n            return <MetricCalculationRow\r\n                    metrics={key[1].metric}\r\n                    metricCalc={key[1].metricCalculation}\r\n                    />\r\n        })\r\n        return test\r\n    }\r\n\r\n    monthArrayElements(numValue) {\r\n        // Metrics for monthly information\r\n        let currentMonthCalc = this.state.metricAreaCalculationsMonth\r\n        let calculationInfo = currentMonthCalc[numValue]\r\n        let monthArrayInfo = []\r\n\r\n        // Render if not undefined/null for month information\r\n        if (calculationInfo) {\r\n            let calculationKeys = calculationInfo[1]\r\n            let keys = Object.keys(calculationKeys)\r\n            monthArrayInfo = keys.map((key) => {\r\n                let monthInfo = calculationKeys[key]\r\n                return <MetricMonthly\r\n                            actual={monthInfo.actual}\r\n                            target={monthInfo.target}\r\n                            month={monthInfo.month}\r\n                        />\r\n            })\r\n        }\r\n        return monthArrayInfo\r\n    }\r\n\r\n    quarterArrayElements(numValue) {\r\n        \r\n        // Metrics for quarterly information\r\n        let currentQuarterCalc = this.state.metricAreaCalculationsQuarter\r\n        let calculationInfoQuarter = currentQuarterCalc[numValue]\r\n        let quarterArrayInfo = []\r\n\r\n        if (calculationInfoQuarter) {\r\n            let calculationKeys = calculationInfoQuarter[1]\r\n            let keys = Object.keys(calculationKeys)\r\n            quarterArrayInfo = keys.map((key) => {\r\n                let quarterInfo = calculationKeys[key]\r\n                return <MetricQuarterly\r\n                            actual={quarterInfo.actual}\r\n                            target={quarterInfo.target}\r\n                            quarter={quarterInfo.quarter}\r\n                        />\r\n            })\r\n        }\r\n        return quarterArrayInfo\r\n    }\r\n\r\n    annualArrayElements(numValue) {\r\n        // Metrics for annual information\r\n        let currentAnnualCalc = this.state.metricAreaCalculationsAnnual\r\n        let calculationInfoAnnual = currentAnnualCalc[numValue]\r\n        let annualArrayInfo = []\r\n\r\n        if (calculationInfoAnnual) {\r\n            let calculationKeys = calculationInfoAnnual[1]\r\n            let keys = Object.keys(calculationKeys)\r\n            annualArrayInfo = keys.map((key) => {\r\n                let annualInfo = calculationKeys[key]\r\n                return <MetricAnnuals\r\n                            actual={annualInfo.actual}\r\n                            target={annualInfo.target}\r\n                            annual={annualInfo.quarter}\r\n                        />\r\n            })\r\n        }\r\n        return annualArrayInfo\r\n    }\r\n\r\n    render() {\r\n        const metricElements = this.arrayElements()\r\n\r\n        let leftButtonString = \"<\"\r\n        let rightButtonString = \">\"\r\n\r\n        let currentNumCalc = this.state.currentCalculation\r\n        let monthElements = this.monthArrayElements(currentNumCalc)\r\n        let quarterElements = this.quarterArrayElements(currentNumCalc)\r\n        let annualElements = this.annualArrayElements(currentNumCalc)\r\n\r\n        return(        \r\n            <div className = \"body\">\r\n            <h1> {this.props.metricAreaInfo} </h1>\r\n            <h1> {this.props.metricAreaID} </h1>\r\n            <h2> Metric Area Summary </h2>\r\n            <h3> Owner: {this.props.metricAreaOwner} </h3>\r\n\r\n            <Table bordered align=\"center\">\r\n                <thead>\r\n                    <tr>\r\n                    <th> Metric </th>\r\n                    <th> Metric Calculations </th>\r\n\r\n                    </tr>\r\n                </thead>\r\n\r\n\r\n                {/* Table representing metric and metric caluclation */}\r\n                <tbody>\r\n                    {metricElements}\r\n                </tbody>\r\n            </Table>\r\n\r\n            {/* Container for current  */}\r\n            <div>\r\n                <div>\r\n                    <Button onClick={this.leftButtonClick}>   \r\n                        {leftButtonString}\r\n                    </Button>\r\n                    <Button onClick={this.rightButtonClick}>\r\n                        {rightButtonString}\r\n                    </Button>\r\n                </div>\r\n\r\n                {/* Monthly Information */}\r\n                {monthElements}\r\n            \r\n                {/* Quarterly Information */}\r\n                {quarterElements}\r\n\r\n                {/* Yearly Information */}\r\n                {annualElements}\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n// // Represents a single row in the metric/metric calculations table\r\n// // Contains all metric name and metric calculation names for a metric area\r\n// class MetricCalculationRow extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <tr>\r\n//                 <th>\r\n//                     {this.props.metrics}\r\n//                 </th>\r\n//                 <th>\r\n//                     {this.props.metricCalc}\r\n//                 </th>\r\n//             </tr>\r\n//         )\r\n//     }\r\n// }\r\n\r\nclass MetricMonthly extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    month(num) {\r\n        switch(num) {\r\n            case 1:\r\n                return \"January\"\r\n            case 2:\r\n                return \"February\"\r\n            case 3: \r\n                return \"March\"\r\n            case 4:\r\n                return \"April\"\r\n            case 5:\r\n                return \"May\"\r\n            case 6: \r\n                return \"June\"\r\n            case 7:\r\n                return \"July\"\r\n            case 8:\r\n                return \"August\"\r\n            case 9:\r\n                return \"September\"\r\n            case 10:\r\n                return \"October\"\r\n            case 11:\r\n                return \"November\"\r\n            case 12:\r\n                return \"December\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let actualValue = this.props.actual\r\n        let monthValue = this.month(this.props.month)\r\n\r\n        // If there is no value existing for the actual yet\r\n        if (!actualValue) {\r\n            actualValue = \"N/A\"\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h2>{monthValue}</h2>\r\n                <Table responsive>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Actual</th>\r\n                            <th>Target</th>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>{actualValue}</th>\r\n                            <th>{this.props.target}</th>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass MetricQuarterly extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n\r\n        let actualValue = this.props.actual\r\n        let quarterValue = \"Q\" + this.props.quarter\r\n\r\n        // If there is no value existing for the actual yet\r\n        if (!actualValue) {\r\n            actualValue = \"N/A\"\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h2>{quarterValue}</h2>\r\n                <Table responsive>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Actual</th>\r\n                            <th>Target</th>\r\n                        </tr>\r\n                        <tr>\r\n                            {/* This should be auto-calculated based upon month values */}\r\n                            <th>{actualValue}</th>\r\n                            <th>{this.props.target}</th>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass MetricAnnuals extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Annual</h2>\r\n                <Table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Actual</th>\r\n                            <th>Target</th>\r\n                            <th>Highlights</th>\r\n                            <th>Lowlights</th>\r\n                            <th>Correction of Error</th>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>{this.props.actual}</th>\r\n                            <th>{this.props.target}</th>\r\n                            <th>{this.props.highlight}</th>\r\n                            <th>{this.props.lowlight}</th>\r\n                            <th>{this.props.correction}</th>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}