{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\insightful\\\\insightful\\\\src\\\\Metrics.js\";\nimport React, { Component } from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport { Button, ButtonGroup, ButtonToolbar } from 'reactstrap';\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\nimport './css/Metrics.css';\nimport './index.js';\nimport firebase from 'firebase/app';\nimport { DashBoard } from './DashBoard';\nexport class Metrics extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      metrics: this.props.metrics,\n      // Represents metricAreaName\n      metricAreaInfo: null\n    };\n  } // // Render dashboard page and send it the necessary props\n  // renderMetricCalculations = (routerProps) => {\n  //     // let rootPath = firebase.database().ref('metricCalculations')\n  //     // rootPath.once('value', (snapshot) => {\n  //     //     let metricCalcInfo = snapshot.val();\n  //     //     let databaseKeys = Object.keys(metricCalcInfo);\n  //     // });\n  //     return <DashBoard\n  //             />\n  // }\n\n\n  setMetricName() {\n    // this.setState((state) => {\n    //     console.log(this.props.metricName)\n    //     state.metricAreaInfo = this.props.metricName\n    //     return state;\n    // })\n    console.log(\"test\");\n  }\n\n  render() {\n    return React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/Metrics/:metricID\",\n      render: this.renderMetricCalculations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, this.props.metrics.map(item => {\n      // Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\n      return React.createElement(MetricAreaCard, {\n        metricName: item,\n        metricNameFunc: this.setMetricName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      });\n    })));\n  }\n\n} // Represents a single metric button to render. A single metric card will contain the name of the metric\n// and acts as a link to the dashboard of the respective metric. \n\nclass MetricAreaCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      metricName: this.props.metricName\n    };\n  }\n\n  render() {\n    return (// When a link is clicked, retrieve the necessary information from firebase and then put it into metricAreaInfo\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: '/Metrics/' + this.props.metricName,\n        onClick: this.props.metricNameFunc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, this.props.metricName))\n    );\n  }\n\n}","map":{"version":3,"sources":["C:/Users/nathan/go/src/insightful/insightful/src/Metrics.js"],"names":["React","Component","Switch","Route","Link","Button","ButtonGroup","ButtonToolbar","Card","CardImg","CardText","CardBody","CardTitle","CardDeck","CardGroup","firebase","DashBoard","Metrics","constructor","props","state","metrics","metricAreaInfo","setMetricName","console","log","render","renderMetricCalculations","map","item","MetricAreaCard","metricName","metricNameFunc"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,QAAoC,kBAApC;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,aAA9B,QAAmD,YAAnD;AACA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,QAAxB,EAAkCC,QAAlC,EAA4CC,SAA5C,EAAuDC,QAAvD,EAAiEC,SAAjE,QAAkF,YAAlF;AACA,OAAO,mBAAP;AACA,OAAO,YAAP;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAO,MAAMC,OAAN,SAAsBhB,SAAtB,CAAgC;AAEnCiB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,KAAKF,KAAL,CAAWE,OADX;AAET;AACAC,MAAAA,cAAc,EAAE;AAHP,KAAb;AAKH,GATkC,CAWnC;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEAC,EAAAA,aAAa,GAAG;AACZ;AACA;AACA;AACA;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,oBAAZ;AAAiC,MAAA,MAAM,EAAE,KAAKC,wBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQ,KAAKR,KAAL,CAAWE,OAAX,CAAmBO,GAAnB,CAAwBC,IAAD,IAAU;AAC7B;AACA,aAAO,oBAAC,cAAD;AACH,QAAA,UAAU,EAAEA,IADT;AAEH,QAAA,cAAc,EAAE,KAAKN,aAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAIH,KAND,CAFR,CAJJ,CADJ;AAkBH;;AApDkC,C,CAuDvC;AACA;;AACA,MAAMO,cAAN,SAA6B7B,SAA7B,CAAuC;AACnCiB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTW,MAAAA,UAAU,EAAE,KAAKZ,KAAL,CAAWY;AADd,KAAb;AAGH;;AAEDL,EAAAA,MAAM,GAAG;AACL,WACI;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAE,cAAc,KAAKP,KAAL,CAAWY,UAAnC;AAA+C,QAAA,OAAO,EAAE,KAAKZ,KAAL,CAAWa,cAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoF,KAAKb,KAAL,CAAWY,UAA/F,CADJ;AAFJ;AAMH;;AAfkC","sourcesContent":["import React, { Component } from 'react';\r\nimport { Switch, Route, Link } from 'react-router-dom';\r\nimport { Button, ButtonGroup, ButtonToolbar } from 'reactstrap';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\r\nimport './css/Metrics.css';\r\nimport './index.js';\r\nimport firebase from 'firebase/app';\r\nimport { DashBoard } from './DashBoard';\r\n\r\nexport class Metrics extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            metrics: this.props.metrics,\r\n            // Represents metricAreaName\r\n            metricAreaInfo: null\r\n        }\r\n    }\r\n\r\n    // // Render dashboard page and send it the necessary props\r\n    // renderMetricCalculations = (routerProps) => {\r\n    //     // let rootPath = firebase.database().ref('metricCalculations')\r\n\r\n    //     // rootPath.once('value', (snapshot) => {\r\n    //     //     let metricCalcInfo = snapshot.val();\r\n    //     //     let databaseKeys = Object.keys(metricCalcInfo);\r\n    //     // });\r\n\r\n    //     return <DashBoard\r\n    //             />\r\n    // }\r\n\r\n    setMetricName() {\r\n        // this.setState((state) => {\r\n        //     console.log(this.props.metricName)\r\n        //     state.metricAreaInfo = this.props.metricName\r\n        //     return state;\r\n        // })\r\n        console.log(\"test\")\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Switch>\r\n               {/* <Route path=\"/Metrics/:metricID\" render={(props) => <DashBoard {...props}\r\n                 metricAreaInfo={this.state.metricAreaInfo} />} /> */}\r\n                <Route path=\"/Metrics/:metricID\" render={this.renderMetricCalculations} />\r\n                <div>\r\n                    {\r\n                        this.props.metrics.map((item) => {\r\n                            // Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\r\n                            return <MetricAreaCard\r\n                                metricName={item}\r\n                                metricNameFunc={this.setMetricName}\r\n                            />\r\n                        })\r\n                    }\r\n                </div>\r\n             </Switch> \r\n        )\r\n    }\r\n}\r\n\r\n// Represents a single metric button to render. A single metric card will contain the name of the metric\r\n// and acts as a link to the dashboard of the respective metric. \r\nclass MetricAreaCard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            metricName: this.props.metricName\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // When a link is clicked, retrieve the necessary information from firebase and then put it into metricAreaInfo\r\n            <div>\r\n                <Link to={'/Metrics/' + this.props.metricName} onClick={this.props.metricNameFunc}>{this.props.metricName}</Link>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}