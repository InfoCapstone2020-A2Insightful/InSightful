{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nathan\\\\go\\\\src\\\\insightful\\\\insightful\\\\src\\\\Metrics.js\";\nimport React, { Component } from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport { Button, ButtonGroup, ButtonToolbar } from 'reactstrap';\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\nimport './css/Metrics.css';\nimport './index.js';\nimport firebase from 'firebase/app';\nimport { DashBoard } from './DashBoard';\nexport class Metrics extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getMetricCalculations = routerProps => {\n      let rootPath = firebase.database().ref('metricCalculations');\n      rootPath.once('value', snapshot => {\n        let metricCalculationInfo = snapshot.val(); // check the metricAreaID of every metric calculation, if that metricAreaID is the same as the one we want\n        // then add it to the list. \n\n        let databaseKeys = Object.keys(metricCalculationInfo);\n        databaseKeys.map(key => {\n          let metricCalcPath = firebase.database().ref('metricCalculations/' + key).child(\"metricAreaID\");\n          metricCalcPath.once('value', snapshot => {\n            let info = snapshot.val(); // if info is equal to target metricAreaID, then \n            // information needed for dashboard...\n            // 1. Metric Calculations\n            // 2. Owner of Metric Area\n            // 3. Metric Calculations on a month by month, quarter by quarter, and year by year basis.\n\n            console.log(info);\n\n            if (info = this.props.metricAreaID) {}\n          });\n        });\n      });\n    };\n\n    this.state = {\n      metrics: this.props.metrics,\n      // Represents all relevant information of a metric area\n      metricAreaInfo: \"test\",\n      metricAreaID: null\n    };\n  } // Callback for rendering metric calculations in the dashboard page.\n  // Will be passed intoDashboard\n\n\n  setMetricID() {\n    console.log('Link has been pressed');\n    let rootPath = firebase.database().ref('metricAreas');\n    rootPath.once('value', snapshot => {\n      let info = snapshot.val();\n      let databaseKeys = Object.keys(info);\n      databaseKeys.map(key => {\n        let item = info[key];\n        console.log(item);\n\n        if (key = this.props.metricName) {\n          this.setState(state => {\n            state.metricAreaID = item;\n            console.log(state.metricAreaID);\n          });\n        }\n      });\n    });\n  }\n\n  render() {\n    return (// Eventually need to pass in metric values as props\n      React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(Route, {\n        path: \"/Metrics/:metricID\",\n        render: props => React.createElement(DashBoard, Object.assign({}, props, {\n          metricAreaInfo: this.state.metricAreaInfo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, this.props.metrics.map(item => {\n        // Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\n        return React.createElement(MetricAreaCard, {\n          metricName: item,\n          metricFunc: this.setMetricID,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        });\n      })))\n    );\n  }\n\n} // Represents a single metric button to render. A single metric card will contain the name of the metric\n// and acts as a link to the dashboard of the respective metric. \n\nclass MetricAreaCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      metricName: this.props.metricName,\n      metricAreaID: null\n    };\n  } // To do. What does a spread operator look like?\n\n\n  render() {\n    return (// When a link is clicked, retrieve the necessary information from firebase and then put it into metricAreaInfo\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: '/Metrics/' + this.props.metricName,\n        onClick: this.props.metricFunc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, this.props.metricName))\n    );\n  }\n\n}","map":{"version":3,"sources":["C:/Users/nathan/go/src/insightful/insightful/src/Metrics.js"],"names":["React","Component","Switch","Route","Link","Button","ButtonGroup","ButtonToolbar","Card","CardImg","CardText","CardBody","CardTitle","CardDeck","CardGroup","firebase","DashBoard","Metrics","constructor","props","getMetricCalculations","routerProps","rootPath","database","ref","once","snapshot","metricCalculationInfo","val","databaseKeys","Object","keys","map","key","metricCalcPath","child","info","console","log","metricAreaID","state","metrics","metricAreaInfo","setMetricID","item","metricName","setState","render","MetricAreaCard","metricFunc"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Switch, Route, Link } from 'react-router-dom';\r\nimport { Button, ButtonGroup, ButtonToolbar } from 'reactstrap';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardDeck, CardGroup } from 'reactstrap';\r\nimport './css/Metrics.css';\r\nimport './index.js';\r\nimport firebase from 'firebase/app';\r\nimport { DashBoard } from './DashBoard';\r\n\r\nexport class Metrics extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            metrics: this.props.metrics,\r\n            // Represents all relevant information of a metric area\r\n            metricAreaInfo: \"test\",\r\n            metricAreaID: null\r\n        }\r\n    }\r\n\r\n    // Callback for rendering metric calculations in the dashboard page.\r\n    // Will be passed intoDashboard\r\n    getMetricCalculations = (routerProps) => {\r\n        let rootPath = firebase.database().ref('metricCalculations')\r\n        rootPath.once('value', (snapshot) => {\r\n            let metricCalculationInfo = snapshot.val();\r\n            // check the metricAreaID of every metric calculation, if that metricAreaID is the same as the one we want\r\n            // then add it to the list. \r\n            let databaseKeys = Object.keys(metricCalculationInfo);\r\n            databaseKeys.map((key) => {\r\n                let metricCalcPath = firebase.database().ref('metricCalculations/' + key).child(\"metricAreaID\")\r\n                metricCalcPath.once('value', (snapshot) => {\r\n                    let info = snapshot.val();\r\n                    // if info is equal to target metricAreaID, then \r\n                    // information needed for dashboard...\r\n                    // 1. Metric Calculations\r\n                    // 2. Owner of Metric Area\r\n                    // 3. Metric Calculations on a month by month, quarter by quarter, and year by year basis.\r\n                    console.log(info);\r\n                    if (info = this.props.metricAreaID) {\r\n                        \r\n                    }\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    setMetricID() {\r\n        console.log('Link has been pressed');\r\n        let rootPath = firebase.database().ref('metricAreas')\r\n        rootPath.once('value', (snapshot) => {\r\n            let info = snapshot.val();\r\n            let databaseKeys = Object.keys(info)\r\n            databaseKeys.map((key) => {\r\n                let item = info[key]\r\n                console.log(item)\r\n                if (key = this.props.metricName) {\r\n                    this.setState((state) => {\r\n                        state.metricAreaID = item\r\n                        console.log(state.metricAreaID)\r\n                    })\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            // Eventually need to pass in metric values as props\r\n            <Switch>\r\n                <Route path=\"/Metrics/:metricID\" render={(props) => <DashBoard {...props}\r\n                    metricAreaInfo={this.state.metricAreaInfo} />} />\r\n                <div>\r\n                    {\r\n                        this.props.metrics.map((item) => {\r\n                            // Pass metricName, metricID into metricAreaCard as props then also pass in a list of props containing information about that specific metric\r\n                            return <MetricAreaCard\r\n                                metricName={item}\r\n                                metricFunc={this.setMetricID}\r\n                            />\r\n                        })\r\n                    }\r\n                </div>\r\n            </Switch>\r\n        )\r\n    }\r\n}\r\n\r\n// Represents a single metric button to render. A single metric card will contain the name of the metric\r\n// and acts as a link to the dashboard of the respective metric. \r\nclass MetricAreaCard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            metricName: this.props.metricName,\r\n            metricAreaID: null\r\n        }\r\n    }\r\n\r\n    // To do. What does a spread operator look like?\r\n\r\n    render() {\r\n        return (\r\n            // When a link is clicked, retrieve the necessary information from firebase and then put it into metricAreaInfo\r\n            <div>\r\n                <Link to={'/Metrics/' + this.props.metricName} onClick={this.props.metricFunc}>{this.props.metricName}</Link>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}